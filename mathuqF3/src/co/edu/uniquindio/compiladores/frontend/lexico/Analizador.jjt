/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
  LOOKAHEAD= 1;
}

PARSER_BEGIN(Analizador)
package co.edu.uniquindio.compiladores.frontend.lexico;

import co.edu.uniquindio.compiladores.utils.Variable;
import co.edu.uniquindio.compiladores.utils.TablaSimbolos;
import java.util.ArrayList;

public class Analizador
{
		
   private int numero = 0;

   private ArrayList<Variable> variables;
   private ArrayList<ParseException> errores;
   private TablaSimbolos tabla;
   


   public TablaSimbolos getTablaSimbolos() {
	return tabla;
   }

   private static void grabarLexema (int n, String token,  String lexema, int nL, int nC) {    
      System.out.println(n + ") Linea:\t"+nL+"\tColumna:\t"+nC+"\tLexema:\t\""+lexema+"\"\t"+"Token:\t"+token);
   }  

   private void grabarDatosPieza(int n, String token, Token pieza) {     
      variables.add(new Variable(n, token, pieza));      
   }

   public void init() {
		variables = new ArrayList< Variable >();
		errores =  new ArrayList< ParseException > ();
		tabla = new TablaSimbolos();
    }
    
  public static void main(String args []) throws ParseException
  {
	try
	{
	   	Analizador analizador = new Analizador(System.in);
	   	SimpleNode nodoPrincipal = analizador.mathuq();
	 	nodoPrincipal.dump("");
       	analizador.obtenerListadoTokens();

       	System.out.println(" Nodo " + nodoPrincipal);
	 	System.out.println("Nodo Hijos " + nodoPrincipal.jjtGetNumChildren());      
       
    }catch(TokenMgrError te){
	   System.out.println("Se han encontrado errores lexicos.");	   
	   System.out.println(te.getMessage());	   
	}catch(ParseException e){ 
	   System.out.println("Analizador: Se han encontrado errores en Parse.");
	   System.out.println(e.getMessage());	   
	}catch(Exception e){ 
	   System.out.println("Analizador: Error General");
	   System.out.println(e.getMessage());	   
	}    
  }

public void probarAnalizador(String nombreArchivo) throws ParseException {
	try{
  		Analizador parser = new Analizador(new java.io.FileInputStream(nombreArchivo));
  		parser.obtenerListadoTokens();
	} catch(java.io.FileNotFoundException e){
		  System.out.println(e.getMessage());
	}
  }


public void inicializarCompilador(String nombreArchivo) throws java.io.FileNotFoundException,TokenMgrError , ParseException, Exception {
	
	   System.out.println("##############################################");
	   System.out.println("# Compilador para MathUQ Inicializandoce ....#");
	   System.out.println("##############################################");
	   System.out.println("");
	   Analizador analizador = new Analizador(new java.io.FileInputStream(nombreArchivo));
	   System.out.println("Compilador ok ... ");  
  
}


  private void errorSaltar(int kind){    
    ParseException error = generateParseException(); // se genera el objeto excepcion
    System.out.println(" *errorSaltar* " + error.toString()); // se imprime el mensaje de error
    errores.add(error);
    Token t;
    do{
      t = getNextToken();
    }
    while (t.kind != kind && t.kind != AnalizadorConstants.EOF);
  }

	public ArrayList<Variable> getVariables() {
		return variables;
	}

	public void setVariables(ArrayList<Variable> variables) {
		this.variables = variables;
	}

	public ArrayList<ParseException> getErrores() {
		return errores;
	}

	public void setErrores(ArrayList<ParseException> errores) {
		this.errores = errores;
	}	




}

PARSER_END(Analizador)

/* Espacio en blanco, saltos de linea, tabulares */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
| < COMENTARIO :"##"(~["#"])*"##" >
}

TOKEN : /*PALABRA RESERVADA LEER*/
{
  < PALABRA_RESERVADA_LEER: "Leer" >
}
TOKEN : /*PALABRA RESERVADA ESCRIBIR*/
{
  < PALABRA_RESERVADA_ESCRIBIR: "Escribir" >
}
TOKEN : /*PALABRA RESERVADA SI*/
{
  < PALABRA_RESERVADA_SI: "Si" >
}
TOKEN : /*PALABRA RESERVADA SINO*/
{
  < PALABRA_RESERVADA_SINO: "Sino" >
}
TOKEN : /*PALABRA RESERVADA FINSI*/
{
  < PALABRA_RESERVADA_FINSI: "Finsi" >
}
TOKEN : /*PALABRA RESERVADA ENTONCES*/
{
  < PALABRA_RESERVADA_ENTONCES: "Entonces" >
}
TOKEN : /*PALABRA RESERVADA ENTERO*/
{
  < PALABRA_RESERVADA_NUMERO: "Numero" >
}
TOKEN : /*PALABRA RESERVADA CADENA*/
{
  < PALABRA_RESERVADA_CADENA: "Cadena" >
}
TOKEN : /* ASIGNACION*/
{
  < ASIGNACION : "=" >
}
TOKEN : /*NUMEROS EJEMPLO 1, 1234, 987*/
{
  < ENTERO : (< DIGIT >)+ | "[""-"(< DIGIT >)+"]" >
| < #DIGIT : [ "0"-"9" ] >
}
TOKEN : /*CONCATENAR*/
{
  < CONCATENAR : "@" >
}
TOKEN : /* SEPARADOR*/
{
  < SEPARADOR : "," >
}
TOKEN : /*IDENTIFICADORES EJEMPLO a, casa, clase1*/
{
  < IDENTIFICADOR :["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9","_"] )* >
} 

TOKEN : /* FIN DE LINEA*/
{
  < FIN_LINEA : "." >
}

TOKEN : /* ABRIR CORCHETE*/
{
  < ABRIR_CORCHETE : "[" >
}

TOKEN : /* CERRAR CORCHETE*/
{
  < CERRAR_CORCHETE : "]" >
}

TOKEN : /* OPERATORS SUSTRACCION*/
{
  < SUMA : "+" >
| < MULTIPLICACION : "*" >
| < MODULO : "%" >
| < SUSTRACCION : "-" >
| < DIVISION : "/" >
}
TOKEN : /*LOGICOS*/
{
  < LOGICOS :"&"|"|" >
}
TOKEN : /*RELACIONALES*/
{
  < RELACIONALES :"<"|">"|" >="|"<="|"=="|"!=" >
}
TOKEN : /*CADENA*/
{
  < CADENA :"\""(~["\""])*"\"" >
}

TOKEN : /*CADENA*/
{
  <FINARCH: "?">
}

SimpleNode mathuq():
{Token t;}
{
	( instruccion() ) *
	< EOF > { return jjtThis; }	
}

void instruccion() throws ParseException:
{}
{
  definirVar() | imprimir("imprimir") | asignarVar("asignar") | condicion()
}

void definirVar():
{Token t;String tipo;}
{
  try { 
  	tipo = tipoDato() t=<IDENTIFICADOR> {jjtThis.value = t.image; tabla.agregar(t.image,t,false,tipo); }
   #IDENTIFICADOR(true)[t=<SEPARADOR> {jjtThis.value = t.image;} #SEPARADOR(true)listadoIdentificadores(tipo)]t=<FIN_LINEA> {jjtThis.value = t.image;} #FIN_LINEA(true)
  }catch(ParseException e) {
	errorSaltar(FIN_LINEA);
  }	 	
  
}

void imprimir(String accion):
{Token t;}
{
  try { 
  t=< PALABRA_RESERVADA_ESCRIBIR > {jjtThis.value = t.image;} #ESCRIBIR(true) t=<ABRIR_CORCHETE> {jjtThis.value = t.image;} #ABRIR_CORCHETE(true) contactenacion(accion) t=<CERRAR_CORCHETE> {jjtThis.value = t.image;} #CERRAR_CORCHETE(true) t=<FIN_LINEA> {jjtThis.value = t.image;} #FIN_LINEA(true)
  }catch(ParseException e) {
    errorSaltar(FIN_LINEA);
}
}

void asignarVar(String accion):
{Token t; Token id;Variable var;}
{
  try {
    (  		id=<IDENTIFICADOR> {jjtThis.value = id.image;} #IDENTIFICADOR(true) t=<ASIGNACION> {jjtThis.value = t.image;} #ASIGNACION(true)  var = tipoAsignacion(id,accion) t=<FIN_LINEA> {jjtThis.value = t.image;} #FIN_LINEA(true)
	)
	  {
	    //System.out.println("La accion en AsignarVar es " + accion );    
	    tabla.validoAsignar(id,var);
	  }
}catch(ParseException e) {
    errorSaltar(FIN_LINEA);
}
}

Variable tipoAsignacion(Token t,String accion) throws ParseException:
{Variable var;}
{ 
 // leer() |  LOOKAHEAD(2) contactenacion() | operacionMat()
 leer() { return tabla.var(t,tabla.obtenerTipo(t));} | var = valor(accion) { return var;} 
}


void condicion():
{Token t;}
{
  try { 
  t=<PALABRA_RESERVADA_SI> {jjtThis.value = t.image;} #SI(true)  grupoCondiciones() t=<PALABRA_RESERVADA_ENTONCES> {jjtThis.value = t.image;} #ENTONCES(true)  (instruccion())+ [t=<PALABRA_RESERVADA_SINO> {jjtThis.value = t.image;} #SINO(true)  (instruccion())+] t=<PALABRA_RESERVADA_FINSI> {jjtThis.value = t.image;} #FINSI(true) 
}catch(ParseException e) {
    errorSaltar(PALABRA_RESERVADA_FINSI);
}
}

void grupoCondiciones() throws ParseException:
{Token t;Variable var1; Variable var2;}
{
  (  	var1 = valor("condicion") t=<RELACIONALES> {jjtThis.value = t.image;} #OPERADOR_RELACIONAL(true) var2 = valor("condicion")
  )
  {
	//aqui la validacion de grupo de condiciones
	tabla.operadorPermitido(var1,var2,t);
  }
}

Variable valor(String accion) throws ParseException:
{Token t; Variable var;}
{   
  var = operacionMat(accion) { return var; } |contactenacion(accion) { return tabla.var("Cadena");}
}

Variable valor2(String accion) throws ParseException:
{Token t;}
{   
  t=<IDENTIFICADOR> {jjtThis.value = t.image;tabla.validoUsar(t,accion); return tabla.var(t,tabla.obtenerTipo(t));} #IDENTIFICADOR(true)|t=<ENTERO> {jjtThis.value = t.image;return tabla.var(t,"Numero");} #ENTERO(true)
}


void leer() throws ParseException:
{Token t;}
{
  t=<PALABRA_RESERVADA_LEER> {jjtThis.value = t.image;} #LEER(true)t=<ABRIR_CORCHETE> {jjtThis.value = t.image;} #ABRIR_CORCHETE(true)t=<CERRAR_CORCHETE> {jjtThis.value = t.image;} #CERRAR_CORCHETE(true) 
}

Variable operacionMat(String accion) throws ParseException:
{Variable var1; Variable var2=null;}
{
    var1 = termino(accion)(operadorAdicion() var2 = termino(accion))*
 {
   return tabla.AritCompatibles(var1,var2);
 }
}

Variable termino(String accion) throws ParseException:
{Variable var1; Variable var2=null;}
{
      var1 = factor(accion)(operadorMult() var2 = factor(accion))*
  
  {
	return tabla.AritCompatibles(var1,var2);
  }
}

Variable factor(String accion) throws ParseException:
{Token t;Variable var;}
{
  (
    var = valor2(accion) | t=<ABRIR_CORCHETE> {jjtThis.value = t.image;} #ABRIR_CORCHETE(true) var = operacionMat(accion) t=<CERRAR_CORCHETE> {jjtThis.value = t.image;} #CERRAR_CORCHETE(true)  )
  {    
	return var;
  }
  
}

void operadorAdicion() throws ParseException:
{Token t;}
{
 t=<SUMA> {jjtThis.value = t.image;} #SUMA(true)|t=<SUSTRACCION> {jjtThis.value = t.image;} #SUSTRACCION(true)
}

void operadorMult() throws ParseException:
{Token t;}
{
  t=<MULTIPLICACION> {jjtThis.value = t.image;} #MULT(true)|t=<MODULO> {jjtThis.value = t.image;} #MOD(true)|t=<DIVISION> {jjtThis.value = t.image;} #DIV(true)
}

void contactenacion(String accion) throws ParseException:
{Token t;}
{
  t=<CADENA> {jjtThis.value = t.image;} #CADENA(true) (t=<CONCATENAR> {jjtThis.value = t.image;} #CONCATENAR(true) valor(accion))*  
}

String tipoDato() throws ParseException:
{Token t;}
{
  t=<PALABRA_RESERVADA_CADENA> {jjtThis.value = t.image;return "Cadena";} #CADENA(true) | t=<PALABRA_RESERVADA_NUMERO> {jjtThis.value = t.image;return "Numero";} #NUMERO(true) 
}

void listadoIdentificadores(String tipo) throws ParseException:
{Token t;}
{
  t= <IDENTIFICADOR> {jjtThis.value = t.image; tabla.agregar(t.image,t,false,tipo);} #IDENTIFICADOR(true)  (t= <SEPARADOR> {jjtThis.value = t.image;} #SEPARADOR(true) t= <IDENTIFICADOR> {jjtThis.value = t.image;tabla.agregar(t.image,t,false,tipo);} #IDENTIFICADOR(true))*
  //t= <IDENTIFICADOR> {jjtThis.value = t.image;} #IDENTIFICADOR(true)  (t= <SEPARADOR> {jjtThis.value = t.image;} #SEPARADOR(true) listadoIdentificadores(tipo))*
}
  

/**
 * Reconoce el contenido completo de un archivo
 *
 * TokenList -> (TokenElement)* 
 */
void obtenerListadoTokens():
{}
{ 
  ( TokenElement() )*  
}

private void TokenElement():
{Token pieza; }
{  
 pieza = <PALABRA_RESERVADA_LEER> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA LEER", pieza); }
| pieza = <PALABRA_RESERVADA_ESCRIBIR> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA ESCRIBIR", pieza); }
| pieza = <PALABRA_RESERVADA_SI> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA SI", pieza); }
| pieza = <PALABRA_RESERVADA_SINO> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA SINO", pieza); }
| pieza = <PALABRA_RESERVADA_FINSI> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA FINSI", pieza); }
| pieza = <PALABRA_RESERVADA_ENTONCES> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA ENTONCES", pieza); }
| pieza = <PALABRA_RESERVADA_NUMERO> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA ENTERO", pieza); }
| pieza = <PALABRA_RESERVADA_CADENA> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA CADENA", pieza); }
| pieza = <ASIGNACION> { numero++; grabarDatosPieza(numero, "ASIGNACION", pieza); }
| pieza = <ENTERO> { numero++; grabarDatosPieza(numero, "ENTERO", pieza); }
| pieza = <CONCATENAR> { numero++; grabarDatosPieza(numero, "CONCATENAR", pieza); }
| pieza = <SEPARADOR> { numero++; grabarDatosPieza(numero, "SEPARADOR", pieza); }
| pieza = <IDENTIFICADOR> { numero++; grabarDatosPieza(numero, "IDENTIFICADOR", pieza); }
| pieza = <FIN_LINEA> { numero++; grabarDatosPieza(numero, "FIN LINEA", pieza); }
| pieza = <ABRIR_CORCHETE> { numero++; grabarDatosPieza(numero, "ABRIR CORCHETE", pieza); }
| pieza = <CERRAR_CORCHETE> { numero++; grabarDatosPieza(numero, "CERRAR CORCHETE", pieza); }
| pieza = <SUMA> { numero++; grabarDatosPieza(numero, "SUMA" , pieza); }
| pieza = <MULTIPLICACION> { numero++; grabarDatosPieza(numero, "MULTIPLICACION", pieza); }
| pieza = <MODULO> { numero++; grabarDatosPieza(numero, "MODULO", pieza); }
| pieza = <SUSTRACCION> { numero++; grabarDatosPieza(numero, "SUSTRACCION", pieza); }
| pieza = <DIVISION> { numero++; grabarDatosPieza(numero, "DIVISION", pieza); }
| pieza = <LOGICOS> { numero++; grabarDatosPieza(numero, "LOGICO", pieza); }
| pieza = <RELACIONALES> { numero++; grabarDatosPieza(numero, "RELACIONALES", pieza); }
| pieza = <CADENA> { numero++; grabarDatosPieza(numero, "CADENA", pieza); }
}
