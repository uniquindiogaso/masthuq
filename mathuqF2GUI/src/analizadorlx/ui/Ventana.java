package analizadorlx.ui;

import analizadorlx.utilidades.Archivos;
import co.edu.uniquindio.compiladores.frontend.lexico.Analizador;
import co.edu.uniquindio.compiladores.frontend.lexico.ParseException;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Ventana del analizador lexico
 *
 * @author Gustavo Salgado, Carlos Toro, Laura Rua Universidad del Quindio
 * Programa de Ingenieria de Sistemas y Computacion Asignatura: Teor√≠a de
 * Lenguajes Formales
 * @version 1.0
 * @since 2017
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Instancia del controlador de los archivos
     */
    private Archivos archivoManager;

    String tituloVentana = ".:. Analizador Lexico Compiladores b2 .:.";

    //Solo permitir analizar cuando se haya cargado un archivo
    boolean permitirAnalizar = false;

    //Ruta Archivo
    String rutaArchivo = "";

    /**
     * Metodo constructor de la ventana
     */
    public Ventana() {
        initComponents();

        setTitle(tituloVentana);
        setLocationRelativeTo(null);
        
        archivoManager = new Archivos();
        jTxtAreaErrores.setForeground(Color.blue);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem4 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        cEditor = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTxtAreaErrores = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        bAnalizar = new javax.swing.JMenuItem();
        mCargar = new javax.swing.JMenuItem();
        mGuardar = new javax.swing.JMenuItem();
        mGuardarComo = new javax.swing.JMenuItem();
        mSalir = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenu2 = new javax.swing.JMenu();
        mAcercaDe = new javax.swing.JMenuItem();

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        analizadorlx.utilidades.TextLineNumber tln = new analizadorlx.utilidades.TextLineNumber(cEditor);
        jScrollPane1.setViewportView(cEditor);
        jScrollPane1.setRowHeaderView( tln );

        jTxtAreaErrores.setColumns(20);
        jTxtAreaErrores.setRows(5);
        jScrollPane4.setViewportView(jTxtAreaErrores);

        jLabel1.setText("Errores");

        jScrollPane3.setViewportView(jTree1);

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analizadorlx/ui/img/inicio.png"))); // NOI18N
        jMenu1.setText("Archivo");

        bAnalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analizadorlx/ui/img/analizar.png"))); // NOI18N
        bAnalizar.setText("Analizar");
        bAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAnalizarActionPerformed(evt);
            }
        });
        jMenu1.add(bAnalizar);

        mCargar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analizadorlx/ui/img/abrir.png"))); // NOI18N
        mCargar.setText("Cargar SQL");
        mCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mCargarActionPerformed(evt);
            }
        });
        jMenu1.add(mCargar);

        mGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analizadorlx/ui/img/guardar.png"))); // NOI18N
        mGuardar.setText("Guardar");
        mGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(mGuardar);

        mGuardarComo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analizadorlx/ui/img/guardar.png"))); // NOI18N
        mGuardarComo.setText("Guardar como");
        mGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mGuardarComoActionPerformed(evt);
            }
        });
        jMenu1.add(mGuardarComo);

        mSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analizadorlx/ui/img/salir.png"))); // NOI18N
        mSalir.setText("Salir");
        mSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mSalirActionPerformed(evt);
            }
        });
        jMenu1.add(mSalir);
        jMenu1.add(jSeparator1);

        jMenuBar1.add(jMenu1);

        jMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analizadorlx/ui/img/acerca.png"))); // NOI18N
        jMenu2.setText("Ayuda");

        mAcercaDe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analizadorlx/ui/img/acerca_devs.png"))); // NOI18N
        mAcercaDe.setText("Acerca De");
        mAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAcercaDeActionPerformed(evt);
            }
        });
        jMenu2.add(mAcercaDe);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 857, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAnalizarActionPerformed
        analizar();
    }//GEN-LAST:event_bAnalizarActionPerformed

    private void mCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mCargarActionPerformed
        jTxtAreaErrores.setText("");
        cEditor.setText("");
        abrirJFileChooser();
    }//GEN-LAST:event_mCargarActionPerformed

    private void mGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mGuardarActionPerformed
        if (!cEditor.getText().isEmpty()) {
           GuardarJFileChooser(false);
        } else {
            JOptionPane.showMessageDialog(null, "Editor vacio, para guardar un archivo debe escribir codigo!");
        }
    }//GEN-LAST:event_mGuardarActionPerformed

    private void mGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mGuardarComoActionPerformed
        GuardarJFileChooser(true);
    }//GEN-LAST:event_mGuardarComoActionPerformed

    private void mSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mSalirActionPerformed

    private void mAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mAcercaDeActionPerformed
        devsInfo();
    }//GEN-LAST:event_mAcercaDeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem bAnalizar;
    private javax.swing.JTextPane cEditor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTree jTree1;
    private javax.swing.JTextArea jTxtAreaErrores;
    private javax.swing.JMenuItem mAcercaDe;
    private javax.swing.JMenuItem mCargar;
    private javax.swing.JMenuItem mGuardar;
    private javax.swing.JMenuItem mGuardarComo;
    private javax.swing.JMenuItem mSalir;
    // End of variables declaration//GEN-END:variables



    /**
     * Analiza los tokens del archivo
     */
    private void analizar() {
        if (permitirAnalizar) {
            //Borrar consola cuando se inicia el analisis 
            jTxtAreaErrores.setText("");

            try {
                Analizador.probarAnalizador(rutaArchivo);
                
                
                
                //Analizador.re
                
                //cEditor.getText().trim()
            } catch (ParseException ex) {
                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Para realizar un an√°lisis Lexico\nse requiere cargar un archivo v√°lido.");
        }

    }

    /**
     * Abre el archivo deseado
     */
    private void abrirJFileChooser() {
        JFileChooser fileChoser = new JFileChooser();
       // FileNameExtensionFilter filtro = new FileNameExtensionFilter(".ssql", "SSQL", "*.ssql");
        //fileChoser.setFileFilter(filtro);
        fileChoser.showOpenDialog(this);

        File archivo = fileChoser.getSelectedFile();

        if (null != archivo) {

            String contenido = archivoManager.leerArchivo(archivo);

            if (null != contenido) {
                permitirAnalizar = true;
                actualizarRutasArchivo(archivo);
                cEditor.setText(contenido);
            }
        } else {
            permitirAnalizar = false;
        }
    }

    /**
     * Guarda el archivo deseado
     *
     * @param guardarComo identifica si es un guardar o guardarComo
     */
    private boolean GuardarJFileChooser(boolean guardarComo) {
        boolean ban = false;

        boolean guarda = false;

        if (guardarComo) {
            JFileChooser fileChoser = new JFileChooser();
            fileChoser.setSelectedFile(new File("miSQLAnalisis_" + System.currentTimeMillis() + ".ssql"));
            fileChoser.setFileFilter(new FileNameExtensionFilter(".ssql", "ssql"));
            fileChoser.showSaveDialog(this);
            File nuevoArchivo = fileChoser.getSelectedFile();

            if (null != nuevoArchivo) {
                guarda = archivoManager.guardar(cEditor.getText(), nuevoArchivo);
                actualizarRutasArchivo(nuevoArchivo);

                if (guarda) {
                    JOptionPane.showMessageDialog(null, "Archivo guardado correctamente..");
                } else {
                    JOptionPane.showMessageDialog(null, "El archivo no pudo guardarse.");
                }
            }
            ban = true;
        } else {
            guarda = archivoManager.guardar(cEditor.getText(), new File(rutaArchivo));
            if (guarda) {
                JOptionPane.showMessageDialog(null, "Archivo guardado correctamente.");
            } else {
                JOptionPane.showMessageDialog(null, "El archivo no pudo guardarse.");
            }
            ban = true;
        }
        return ban;
    }

    /**
     * Actualiza la ruta del archivo analizado
     *
     * @param archivo el archivo a actualizar
     */
    private void actualizarRutasArchivo(File archivo) {
        try {
            setTitle(tituloVentana + " | analizando : " + archivo.getCanonicalPath());
            rutaArchivo = archivo.getCanonicalPath();

        } catch (IOException ex) {
            Logger.getLogger(Ventana.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Informacion sobre los creadores del Software
     */
    private void devsInfo() {
        JOptionPane.showMessageDialog(null, "Materia: Teoria de Lenguajes Formales\n"
                + "Universidad del Quindio 2017\n"
                + "Devs:\n"
                + "Gustavo Salgado");
    }
}
