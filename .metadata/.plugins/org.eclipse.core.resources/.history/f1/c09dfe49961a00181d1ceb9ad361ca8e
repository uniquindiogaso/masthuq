/* Generated By:JavaCC: Do not edit this line. AnalizadorConstants.java */
package co.edu.uniquindio.compiladores.frontend.lexico;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalizadorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PALABRA_RESERVADA_LEER = 6;
  /** RegularExpression Id. */
  int PALABRA_RESERVADA_ESCRIBIR = 7;
  /** RegularExpression Id. */
  int PALABRA_RESERVADA_SI = 8;
  /** RegularExpression Id. */
  int PALABRA_RESERVADA_SINO = 9;
  /** RegularExpression Id. */
  int PALABRA_RESERVADA_FINSI = 10;
  /** RegularExpression Id. */
  int PALABRA_RESERVADA_ENTONCES = 11;
  /** RegularExpression Id. */
  int PALABRA_RESERVADA_MIENTRAS = 12;
  /** RegularExpression Id. */
  int PALABRA_RESERVADA_RETORNAR = 13;
  /** RegularExpression Id. */
  int PALABRA_RESERVADA_ENTERO = 14;
  /** RegularExpression Id. */
  int PALABRA_RESERVADA_LOGICO = 15;
  /** RegularExpression Id. */
  int PALABRA_RESERVADA_CADENA = 16;
  /** RegularExpression Id. */
  int PALABRA_RESERVADA_IMPRIMIR = 17;
  /** RegularExpression Id. */
  int ASIGNACION = 18;
  /** RegularExpression Id. */
  int ENTERO = 19;
  /** RegularExpression Id. */
  int DIGIT = 20;
  /** RegularExpression Id. */
  int CONCATENAR = 21;
  /** RegularExpression Id. */
  int SEPARADOR = 22;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 23;
  /** RegularExpression Id. */
  int SUMA = 24;
  /** RegularExpression Id. */
  int MULTIPLICACION = 25;
  /** RegularExpression Id. */
  int MODULO = 26;
  /** RegularExpression Id. */
  int SUSTRACCION = 27;
  /** RegularExpression Id. */
  int DIVISION = 28;
  /** RegularExpression Id. */
  int FIN_SENTENCIA = 29;
  /** RegularExpression Id. */
  int ABRIR_CORCHETE = 30;
  /** RegularExpression Id. */
  int CERRAR_CORCHETE = 31;
  /** RegularExpression Id. */
  int ABRIR_LLAVE = 32;
  /** RegularExpression Id. */
  int CERRAR_LLAVE = 33;
  /** RegularExpression Id. */
  int COMENTARIO = 34;
  /** RegularExpression Id. */
  int CADENA = 35;
  /** RegularExpression Id. */
  int LOGICOS = 36;
  /** RegularExpression Id. */
  int RELACIONALES = 37;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"Leer\"",
    "\"Escribir\"",
    "\"Si\"",
    "\"Sino\"",
    "\"Finsi\"",
    "\"Entonces\"",
    "\"Mientras\"",
    "\"Retornar\"",
    "\"Entero\"",
    "\"Logico\"",
    "\"Cadena\"",
    "\"Imprimir\"",
    "\"=\"",
    "<ENTERO>",
    "<DIGIT>",
    "\"@\"",
    "\",\"",
    "<IDENTIFICADOR>",
    "\"+\"",
    "\"*\"",
    "\"%\"",
    "\"-\"",
    "\"/\"",
    "\".\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "<COMENTARIO>",
    "<CADENA>",
    "<LOGICOS>",
    "<RELACIONALES>",
  };

}
