/* Generated By:JJTree&JavaCC: Do not edit this line. Analizador.java */
package co.edu.uniquindio.compiladores.frontend.lexico;

import co.edu.uniquindio.compiladores.utils.Variable;
import java.util.ArrayList;

public class Analizador/*@bgen(jjtree)*/implements AnalizadorTreeConstants, AnalizadorConstants {/*@bgen(jjtree)*/
  protected static JJTAnalizadorState jjtree = new JJTAnalizadorState();
   static int numero = 0;

   private static ArrayList<Variable> variables;
   private static ArrayList<ParseException> errores;
   private SimpleNode nodoPrincipal;


   private static void grabarLexema (int n, String token,  String lexema, int nL, int nC) {
      //System.out.println(n + ") Token: \t"+  token + "\t\t\tLexema: \t\"" + lexema + "\" \tLinea: \t"+ nL + "\tColumna: \t" + nC);
      System.out.println(n + ") Linea:\u005ct"+nL+"\u005ctColumna:\u005ct"+nC+"\u005ctLexema:\u005ct\u005c""+lexema+"\u005c"\u005ct"+"Token:\u005ct"+token);
   }

   private static void grabarDatosPieza(int n, String token, Token pieza) {
      grabarLexema(n, token, pieza.image, pieza.beginLine, pieza.beginColumn );
      variables.add(new Variable(n, token, pieza));
   }

  public static void main(String args []) throws ParseException
  {
        try
        {
                errores = new ArrayList< ParseException > ();
                System.out.println("Ingrese el codigo a analizar:");
                Analizador analizador = new Analizador(System.in);
                SimpleNode sNode = analizador.mathuq();
                sNode.dump("");
        //analizador.obtenerListadoTokens();

           System.out.println("Se ha compilado con exito");
       //System.out.println("Analisis terminado:");
       //System.out.println("No se han hallado errores lexicos");


    }catch(TokenMgrError te){
           System.out.println("Se han encontrado errores lexicos.");
           System.out.println(te.getMessage());
        }catch(ParseException e){
           System.out.println("Analizador: Se han encontrado errores en Parse.");
           System.out.println(e.getMessage());
        }catch(Exception e){
           System.out.println("Analizador: Error General");
           System.out.println(e.getMessage());
        }
  }

public static void probarAnalizador(String nombreArchivo) throws ParseException {
        try{
                Analizador parser = new Analizador(new java.io.FileInputStream(nombreArchivo));
                parser.obtenerListadoTokens();
        } catch(java.io.FileNotFoundException e){
                  System.out.println(e.getMessage());
        }
  }


public void inicializarCompilador(String nombreArchivo) throws ParseException {
        try{
                errores = new ArrayList< ParseException > ();
                //System.out.println("Ingrese el codigo a analizar:");
                Analizador analizador = new Analizador(new java.io.FileInputStream(nombreArchivo));
                analizador.obtenerListadoTokens();
                SimpleNode sNode = analizador.mathuq();
                sNode.dump("");

           System.out.println("Se ha compilado con exito");
       //System.out.println("Analisis terminado:");
       //System.out.println("No se han hallado errores lexicos");      

    }catch(java.io.FileNotFoundException e){
                  System.out.println(e.getMessage());
        }catch(TokenMgrError te){
           System.out.println("Se han encontrado errores lexicos.");
           System.out.println(te.getMessage());
        }catch(ParseException e){
           System.out.println("Analizador: Se han encontrado errores en Parse.");
           System.out.println(e.getMessage());
        }catch(Exception e){
           System.out.println("Analizador: Error General");
           System.out.println(e.getMessage());
        }
}


  private static void errorSaltar(int kind){
    ParseException error = generateParseException(); // se genera el objeto excepcion
    System.out.println(" *errorSaltar* " + error.toString()); // se imprime el mensaje de error
        //String msj = "Linea " +  error.currentToken.beginLine  + " Columna " + error.currentToken.beginColumn + " Encontrado " + error.tokenImage[0]   ;
    //System.out.println(" *errorSaltar* " + msj );   
    errores.add(error);
    Token t;
    do{
      t = getNextToken();
    }
    while (t.kind != kind);
  }

        public ArrayList<Variable> getVariables() {
                return variables;
        }

        public void setVariables(ArrayList<Variable> variables) {
                this.variables = variables;
        }

        public ArrayList<ParseException> getErrores() {
                return errores;
        }

        public void setErrores(ArrayList<ParseException> errores) {
                this.errores = errores;
        }
        
    	public SimpleNode getNodoPrincipal() {
    		return nodoPrincipal;
    	}

    	public void setNodoPrincipal(SimpleNode nodoPrincipal) {
    		this.nodoPrincipal = nodoPrincipal;
    	}

  static final public SimpleNode mathuq() throws ParseException {
 /*@bgen(jjtree) mathuq */
  SimpleNode jjtn000 = new SimpleNode(JJTMATHUQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      listadoSentencias();
      jj_consume_token(FINARCH);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void listadoSentencias() throws ParseException, ParseException {
 /*@bgen(jjtree) listadoSentencias */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTADOSENTENCIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      instruccion();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PALABRA_RESERVADA_ESCRIBIR:
        case PALABRA_RESERVADA_SI:
        case PALABRA_RESERVADA_NUMERO:
        case PALABRA_RESERVADA_CADENA:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        instruccion();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void instruccion() throws ParseException, ParseException {
 /*@bgen(jjtree) instruccion */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTRUCCION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PALABRA_RESERVADA_NUMERO:
      case PALABRA_RESERVADA_CADENA:
        definirVar();
        break;
      case PALABRA_RESERVADA_ESCRIBIR:
        imprimir();
        break;
      case IDENTIFICADOR:
        asignarVar();
        break;
      case PALABRA_RESERVADA_SI:
        condicion();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void definirVar() throws ParseException {
 /*@bgen(jjtree) definirVar */
 SimpleNode jjtn000 = new SimpleNode(JJTDEFINIRVAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        tipoDato();
        t = jj_consume_token(IDENTIFICADOR);
                                      SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFICADOR);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
        try {
                                      jjtree.closeNodeScope(jjtn001,  true);
                                      jjtc001 = false;
                                     jjtn001.value = t.image;
        } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  true);
                                      }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEPARADOR:
          t = jj_consume_token(SEPARADOR);
                                                                                                    SimpleNode jjtn002 = new SimpleNode(JJTSEPARADOR);
                                                                                                    boolean jjtc002 = true;
                                                                                                    jjtree.openNodeScope(jjtn002);
          try {
                                                                                                    jjtree.closeNodeScope(jjtn002,  true);
                                                                                                    jjtc002 = false;
                                                                                                   jjtn002.value = t.image;
          } finally {
                                                                                                    if (jjtc002) {
                                                                                                      jjtree.closeNodeScope(jjtn002,  true);
                                                                                                    }
          }
          listadoIdentificadores();
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        t = jj_consume_token(FIN_LINEA);
                                                                                                                                                                                      SimpleNode jjtn003 = new SimpleNode(JJTFIN_LINEA);
                                                                                                                                                                                      boolean jjtc003 = true;
                                                                                                                                                                                      jjtree.openNodeScope(jjtn003);
        try {
                                                                                                                                                                                      jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                                      jjtc003 = false;
                                                                                                                                                                                     jjtn003.value = t.image;
        } finally {
                                                                                                                                                                                      if (jjtc003) {
                                                                                                                                                                                        jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                                      }
        }
      } catch (ParseException e) {
        errorSaltar(FIN_LINEA);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void imprimir() throws ParseException {
 /*@bgen(jjtree) imprimir */
 SimpleNode jjtn000 = new SimpleNode(JJTIMPRIMIR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        t = jj_consume_token(PALABRA_RESERVADA_ESCRIBIR);
                                     SimpleNode jjtn001 = new SimpleNode(JJTESCRIBIR);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
        try {
                                     jjtree.closeNodeScope(jjtn001,  true);
                                     jjtc001 = false;
                                    jjtn001.value = t.image;
        } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  true);
                                     }
        }
        t = jj_consume_token(ABRIR_CORCHETE);
                                                                                                   SimpleNode jjtn002 = new SimpleNode(JJTABRIR_CORCHETE);
                                                                                                   boolean jjtc002 = true;
                                                                                                   jjtree.openNodeScope(jjtn002);
        try {
                                                                                                   jjtree.closeNodeScope(jjtn002,  true);
                                                                                                   jjtc002 = false;
                                                                                                  jjtn002.value = t.image;
        } finally {
                                                                                                   if (jjtc002) {
                                                                                                     jjtree.closeNodeScope(jjtn002,  true);
                                                                                                   }
        }
        contactenacion();
        t = jj_consume_token(CERRAR_CORCHETE);
                                                                                                                                                                                         SimpleNode jjtn003 = new SimpleNode(JJTCERRAR_CORCHETE);
                                                                                                                                                                                         boolean jjtc003 = true;
                                                                                                                                                                                         jjtree.openNodeScope(jjtn003);
        try {
                                                                                                                                                                                         jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                                         jjtc003 = false;
                                                                                                                                                                                        jjtn003.value = t.image;
        } finally {
                                                                                                                                                                                         if (jjtc003) {
                                                                                                                                                                                           jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                                         }
        }
        t = jj_consume_token(FIN_LINEA);
                                                                                                                                                                                                                                                         SimpleNode jjtn004 = new SimpleNode(JJTFIN_LINEA);
                                                                                                                                                                                                                                                         boolean jjtc004 = true;
                                                                                                                                                                                                                                                         jjtree.openNodeScope(jjtn004);
        try {
                                                                                                                                                                                                                                                         jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                                                         jjtc004 = false;
                                                                                                                                                                                                                                                        jjtn004.value = t.image;
        } finally {
                                                                                                                                                                                                                                                         if (jjtc004) {
                                                                                                                                                                                                                                                           jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                                                         }
        }
      } catch (ParseException e) {
    errorSaltar(FIN_LINEA);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void asignarVar() throws ParseException {
 /*@bgen(jjtree) asignarVar */
 SimpleNode jjtn000 = new SimpleNode(JJTASIGNARVAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        t = jj_consume_token(IDENTIFICADOR);
                      SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFICADOR);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
        try {
                      jjtree.closeNodeScope(jjtn001,  true);
                      jjtc001 = false;
                     jjtn001.value = t.image;
        } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  true);
                      }
        }
        t = jj_consume_token(ASIGNACION);
                                                                                     SimpleNode jjtn002 = new SimpleNode(JJTASIGNACION);
                                                                                     boolean jjtc002 = true;
                                                                                     jjtree.openNodeScope(jjtn002);
        try {
                                                                                     jjtree.closeNodeScope(jjtn002,  true);
                                                                                     jjtc002 = false;
                                                                                    jjtn002.value = t.image;
        } finally {
                                                                                     if (jjtc002) {
                                                                                       jjtree.closeNodeScope(jjtn002,  true);
                                                                                     }
        }
        tipoAsignacion();
        t = jj_consume_token(FIN_LINEA);
                                                                                                                                                                  SimpleNode jjtn003 = new SimpleNode(JJTFIN_LINEA);
                                                                                                                                                                  boolean jjtc003 = true;
                                                                                                                                                                  jjtree.openNodeScope(jjtn003);
        try {
                                                                                                                                                                  jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                  jjtc003 = false;
                                                                                                                                                                 jjtn003.value = t.image;
        } finally {
                                                                                                                                                                  if (jjtc003) {
                                                                                                                                                                    jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                  }
        }
      } catch (ParseException e) {
    errorSaltar(FIN_LINEA);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void tipoAsignacion() throws ParseException, ParseException {
 /*@bgen(jjtree) tipoAsignacion */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOASIGNACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PALABRA_RESERVADA_LEER:
        leer();
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_1(2)) {
          contactenacion();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ENTERO:
          case IDENTIFICADOR:
          case ABRIR_CORCHETE:
          case CADENA:
            operacionMat();
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void condicion() throws ParseException {
 /*@bgen(jjtree) condicion */
 SimpleNode jjtn000 = new SimpleNode(JJTCONDICION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        t = jj_consume_token(PALABRA_RESERVADA_SI);
                             SimpleNode jjtn001 = new SimpleNode(JJTSI);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
        try {
                             jjtree.closeNodeScope(jjtn001,  true);
                             jjtc001 = false;
                            jjtn001.value = t.image;
        } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  true);
                             }
        }
        grupoCondiciones();
        t = jj_consume_token(PALABRA_RESERVADA_ENTONCES);
                                                                                                                     SimpleNode jjtn002 = new SimpleNode(JJTENTONCES);
                                                                                                                     boolean jjtc002 = true;
                                                                                                                     jjtree.openNodeScope(jjtn002);
        try {
                                                                                                                     jjtree.closeNodeScope(jjtn002,  true);
                                                                                                                     jjtc002 = false;
                                                                                                                    jjtn002.value = t.image;
        } finally {
                                                                                                                     if (jjtc002) {
                                                                                                                       jjtree.closeNodeScope(jjtn002,  true);
                                                                                                                     }
        }
        listadoSentencias();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PALABRA_RESERVADA_SINO:
          t = jj_consume_token(PALABRA_RESERVADA_SINO);
                                                                                                                                                                                                                 SimpleNode jjtn003 = new SimpleNode(JJTSINO);
                                                                                                                                                                                                                 boolean jjtc003 = true;
                                                                                                                                                                                                                 jjtree.openNodeScope(jjtn003);
          try {
                                                                                                                                                                                                                 jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                                                                 jjtc003 = false;
                                                                                                                                                                                                                jjtn003.value = t.image;
          } finally {
                                                                                                                                                                                                                 if (jjtc003) {
                                                                                                                                                                                                                   jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                                                                 }
          }
          listadoSentencias();
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        t = jj_consume_token(PALABRA_RESERVADA_FINSI);
                                                                                                                                                                                                                                                                                                          SimpleNode jjtn004 = new SimpleNode(JJTFINSI);
                                                                                                                                                                                                                                                                                                          boolean jjtc004 = true;
                                                                                                                                                                                                                                                                                                          jjtree.openNodeScope(jjtn004);
        try {
                                                                                                                                                                                                                                                                                                          jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                                                                                                          jjtc004 = false;
                                                                                                                                                                                                                                                                                                         jjtn004.value = t.image;
        } finally {
                                                                                                                                                                                                                                                                                                          if (jjtc004) {
                                                                                                                                                                                                                                                                                                            jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                                                                                                          }
        }
      } catch (ParseException e) {
    errorSaltar(PALABRA_RESERVADA_FINSI);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void grupoCondiciones() throws ParseException, ParseException {
 /*@bgen(jjtree) grupoCondiciones */
 SimpleNode jjtn000 = new SimpleNode(JJTGRUPOCONDICIONES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      valor();
      t = jj_consume_token(RELACIONALES);
                             SimpleNode jjtn001 = new SimpleNode(JJTOPERADOR_RELACIONAL);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
      try {
                             jjtree.closeNodeScope(jjtn001,  true);
                             jjtc001 = false;
                            jjtn001.value = t.image;
      } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  true);
                             }
      }
      valor();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void valor() throws ParseException, ParseException {
 /*@bgen(jjtree) valor */
 SimpleNode jjtn000 = new SimpleNode(JJTVALOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        t = jj_consume_token(IDENTIFICADOR);
                      SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFICADOR);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
        try {
                      jjtree.closeNodeScope(jjtn001,  true);
                      jjtc001 = false;
                     jjtn001.value = t.image;
        } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  true);
                      }
        }
        break;
      case ENTERO:
        t = jj_consume_token(ENTERO);
                                                                                 SimpleNode jjtn002 = new SimpleNode(JJTENTERO);
                                                                                 boolean jjtc002 = true;
                                                                                 jjtree.openNodeScope(jjtn002);
        try {
                                                                                 jjtree.closeNodeScope(jjtn002,  true);
                                                                                 jjtc002 = false;
                                                                                jjtn002.value = t.image;
        } finally {
                                                                                 if (jjtc002) {
                                                                                   jjtree.closeNodeScope(jjtn002,  true);
                                                                                 }
        }
        break;
      case CADENA:
        t = jj_consume_token(CADENA);
                                                                                                                                     SimpleNode jjtn003 = new SimpleNode(JJTCADENA);
                                                                                                                                     boolean jjtc003 = true;
                                                                                                                                     jjtree.openNodeScope(jjtn003);
        try {
                                                                                                                                     jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                     jjtc003 = false;
                                                                                                                                    jjtn003.value = t.image;
        } finally {
                                                                                                                                     if (jjtc003) {
                                                                                                                                       jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                     }
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void leer() throws ParseException {
 /*@bgen(jjtree) leer */
 SimpleNode jjtn000 = new SimpleNode(JJTLEER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        t = jj_consume_token(PALABRA_RESERVADA_LEER);
                               SimpleNode jjtn001 = new SimpleNode(JJTLEER);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
        try {
                               jjtree.closeNodeScope(jjtn001,  true);
                               jjtc001 = false;
                              jjtn001.value = t.image;
        } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  true);
                               }
        }
        t = jj_consume_token(ABRIR_CORCHETE);
                                                                                        SimpleNode jjtn002 = new SimpleNode(JJTABRIR_CORCHETE);
                                                                                        boolean jjtc002 = true;
                                                                                        jjtree.openNodeScope(jjtn002);
        try {
                                                                                        jjtree.closeNodeScope(jjtn002,  true);
                                                                                        jjtc002 = false;
                                                                                       jjtn002.value = t.image;
        } finally {
                                                                                        if (jjtc002) {
                                                                                          jjtree.closeNodeScope(jjtn002,  true);
                                                                                        }
        }
        t = jj_consume_token(CERRAR_CORCHETE);
                                                                                                                                                            SimpleNode jjtn003 = new SimpleNode(JJTCERRAR_CORCHETE);
                                                                                                                                                            boolean jjtc003 = true;
                                                                                                                                                            jjtree.openNodeScope(jjtn003);
        try {
                                                                                                                                                            jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                            jjtc003 = false;
                                                                                                                                                           jjtn003.value = t.image;
        } finally {
                                                                                                                                                            if (jjtc003) {
                                                                                                                                                              jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                            }
        }
        t = jj_consume_token(FIN_LINEA);
                                                                                                                                                                                                                           SimpleNode jjtn004 = new SimpleNode(JJTFIN_LINEA);
                                                                                                                                                                                                                           boolean jjtc004 = true;
                                                                                                                                                                                                                           jjtree.openNodeScope(jjtn004);
        try {
                                                                                                                                                                                                                           jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                           jjtc004 = false;
                                                                                                                                                                                                                          jjtn004.value = t.image;
        } finally {
                                                                                                                                                                                                                           if (jjtc004) {
                                                                                                                                                                                                                             jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                           }
        }
      } catch (ParseException e) {
    errorSaltar(FIN_LINEA);
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void operacionMat() throws ParseException, ParseException {
 /*@bgen(jjtree) operacionMat */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERACIONMAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      termino();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUMA:
        case SUSTRACCION:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        operadorAdicion();
        termino();
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void termino() throws ParseException, ParseException {
 /*@bgen(jjtree) termino */
  SimpleNode jjtn000 = new SimpleNode(JJTTERMINO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      factor();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLICACION:
        case MODULO:
        case DIVISION:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        operadorMult();
        factor();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void factor() throws ParseException, ParseException {
 /*@bgen(jjtree) factor */
 SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENTERO:
      case IDENTIFICADOR:
      case CADENA:
        valor();
        break;
      case ABRIR_CORCHETE:
        t = jj_consume_token(ABRIR_CORCHETE);
                                 SimpleNode jjtn001 = new SimpleNode(JJTABRIR_CORCHETE);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
        try {
                                 jjtree.closeNodeScope(jjtn001,  true);
                                 jjtc001 = false;
                                jjtn001.value = t.image;
        } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  true);
                                 }
        }
        operacionMat();
        t = jj_consume_token(CERRAR_CORCHETE);
                                                                                                                     SimpleNode jjtn002 = new SimpleNode(JJTCERRAR_CORCHETE);
                                                                                                                     boolean jjtc002 = true;
                                                                                                                     jjtree.openNodeScope(jjtn002);
        try {
                                                                                                                     jjtree.closeNodeScope(jjtn002,  true);
                                                                                                                     jjtc002 = false;
                                                                                                                    jjtn002.value = t.image;
        } finally {
                                                                                                                     if (jjtc002) {
                                                                                                                       jjtree.closeNodeScope(jjtn002,  true);
                                                                                                                     }
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void operadorAdicion() throws ParseException, ParseException {
 /*@bgen(jjtree) operadorAdicion */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORADICION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
        t = jj_consume_token(SUMA);
            SimpleNode jjtn001 = new SimpleNode(JJTSUMA);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
        try {
            jjtree.closeNodeScope(jjtn001,  true);
            jjtc001 = false;
           jjtn001.value = t.image;
        } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  true);
            }
        }
        break;
      case SUSTRACCION:
        t = jj_consume_token(SUSTRACCION);
                                                                   SimpleNode jjtn002 = new SimpleNode(JJTSUSTRACCION);
                                                                   boolean jjtc002 = true;
                                                                   jjtree.openNodeScope(jjtn002);
        try {
                                                                   jjtree.closeNodeScope(jjtn002,  true);
                                                                   jjtc002 = false;
                                                                  jjtn002.value = t.image;
        } finally {
                                                                   if (jjtc002) {
                                                                     jjtree.closeNodeScope(jjtn002,  true);
                                                                   }
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void operadorMult() throws ParseException, ParseException {
 /*@bgen(jjtree) operadorMult */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORMULT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACION:
        t = jj_consume_token(MULTIPLICACION);
                       SimpleNode jjtn001 = new SimpleNode(JJTSUMA);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
        try {
                       jjtree.closeNodeScope(jjtn001,  true);
                       jjtc001 = false;
                      jjtn001.value = t.image;
        } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  true);
                       }
        }
        break;
      case MODULO:
        t = jj_consume_token(MODULO);
                                                                         SimpleNode jjtn002 = new SimpleNode(JJTSUSTRACCION);
                                                                         boolean jjtc002 = true;
                                                                         jjtree.openNodeScope(jjtn002);
        try {
                                                                         jjtree.closeNodeScope(jjtn002,  true);
                                                                         jjtc002 = false;
                                                                        jjtn002.value = t.image;
        } finally {
                                                                         if (jjtc002) {
                                                                           jjtree.closeNodeScope(jjtn002,  true);
                                                                         }
        }
        break;
      case DIVISION:
        t = jj_consume_token(DIVISION);
                                                                                                                                    SimpleNode jjtn003 = new SimpleNode(JJTSUSTRACCION);
                                                                                                                                    boolean jjtc003 = true;
                                                                                                                                    jjtree.openNodeScope(jjtn003);
        try {
                                                                                                                                    jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                    jjtc003 = false;
                                                                                                                                   jjtn003.value = t.image;
        } finally {
                                                                                                                                    if (jjtc003) {
                                                                                                                                      jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                    }
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void contactenacion() throws ParseException, ParseException {
 /*@bgen(jjtree) contactenacion */
 SimpleNode jjtn000 = new SimpleNode(JJTCONTACTENACION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      valor();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONCATENAR:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_4;
        }
        t = jj_consume_token(CONCATENAR);
                            SimpleNode jjtn001 = new SimpleNode(JJTCONCATENAR);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
        try {
                            jjtree.closeNodeScope(jjtn001,  true);
                            jjtc001 = false;
                           jjtn001.value = t.image;
        } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  true);
                            }
        }
        valor();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void tipoDato() throws ParseException, ParseException {
 /*@bgen(jjtree) tipoDato */
 SimpleNode jjtn000 = new SimpleNode(JJTTIPODATO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PALABRA_RESERVADA_CADENA:
        t = jj_consume_token(PALABRA_RESERVADA_CADENA);
                                 SimpleNode jjtn001 = new SimpleNode(JJTCADENA);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
        try {
                                 jjtree.closeNodeScope(jjtn001,  true);
                                 jjtc001 = false;
                                jjtn001.value = t.image;
        } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  true);
                                 }
        }
        break;
      case PALABRA_RESERVADA_NUMERO:
        t = jj_consume_token(PALABRA_RESERVADA_NUMERO);
                                                                                                         SimpleNode jjtn002 = new SimpleNode(JJTNUMERO);
                                                                                                         boolean jjtc002 = true;
                                                                                                         jjtree.openNodeScope(jjtn002);
        try {
                                                                                                         jjtree.closeNodeScope(jjtn002,  true);
                                                                                                         jjtc002 = false;
                                                                                                        jjtn002.value = t.image;
        } finally {
                                                                                                         if (jjtc002) {
                                                                                                           jjtree.closeNodeScope(jjtn002,  true);
                                                                                                         }
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void listadoIdentificadores() throws ParseException, ParseException {
 /*@bgen(jjtree) listadoIdentificadores */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTADOIDENTIFICADORES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFICADOR);
                       SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFICADOR);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
      try {
                       jjtree.closeNodeScope(jjtn001,  true);
                       jjtc001 = false;
                      jjtn001.value = t.image;
      } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  true);
                       }
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEPARADOR:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_5;
        }
        t = jj_consume_token(SEPARADOR);
                                                                                        SimpleNode jjtn002 = new SimpleNode(JJTSEPARADOR);
                                                                                        boolean jjtc002 = true;
                                                                                        jjtree.openNodeScope(jjtn002);
        try {
                                                                                        jjtree.closeNodeScope(jjtn002,  true);
                                                                                        jjtc002 = false;
                                                                                       jjtn002.value = t.image;
        } finally {
                                                                                        if (jjtc002) {
                                                                                          jjtree.closeNodeScope(jjtn002,  true);
                                                                                        }
        }
        t = jj_consume_token(IDENTIFICADOR);
                                                                                                                                                       SimpleNode jjtn003 = new SimpleNode(JJTIDENTIFICADOR);
                                                                                                                                                       boolean jjtc003 = true;
                                                                                                                                                       jjtree.openNodeScope(jjtn003);
        try {
                                                                                                                                                       jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                       jjtc003 = false;
                                                                                                                                                      jjtn003.value = t.image;
        } finally {
                                                                                                                                                       if (jjtc003) {
                                                                                                                                                         jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                       }
        }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/**
 * Reconoce el contenido completo de un archivo
 *
 * TokenList -> (TokenElement)* 
 */
  static final public void obtenerListadoTokens() throws ParseException {
 /*@bgen(jjtree) obtenerListadoTokens */
  SimpleNode jjtn000 = new SimpleNode(JJTOBTENERLISTADOTOKENS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PALABRA_RESERVADA_LEER:
        case PALABRA_RESERVADA_ESCRIBIR:
        case PALABRA_RESERVADA_SI:
        case PALABRA_RESERVADA_SINO:
        case PALABRA_RESERVADA_FINSI:
        case PALABRA_RESERVADA_ENTONCES:
        case PALABRA_RESERVADA_MIENTRAS:
        case PALABRA_RESERVADA_RETORNAR:
        case PALABRA_RESERVADA_NUMERO:
        case PALABRA_RESERVADA_LOGICO:
        case PALABRA_RESERVADA_CADENA:
        case PALABRA_RESERVADA_IMPRIMIR:
        case ASIGNACION:
        case ENTERO:
        case CONCATENAR:
        case SEPARADOR:
        case IDENTIFICADOR:
        case FIN_LINEA:
        case ABRIR_CORCHETE:
        case CERRAR_CORCHETE:
        case ABRIR_LLAVE:
        case CERRAR_LLAVE:
        case SUMA:
        case MULTIPLICACION:
        case MODULO:
        case SUSTRACCION:
        case DIVISION:
        case LOGICOS:
        case RELACIONALES:
        case COMENTARIO:
        case CADENA:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_6;
        }
        TokenElement();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TokenElement() throws ParseException {
 /*@bgen(jjtree) TokenElement */
 SimpleNode jjtn000 = new SimpleNode(JJTTOKENELEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token pieza;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PALABRA_RESERVADA_LEER:
        pieza = jj_consume_token(PALABRA_RESERVADA_LEER);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                    numero++; grabarDatosPieza(numero, "PALABRA RESERVADA LEER", pieza);
        break;
      case PALABRA_RESERVADA_ESCRIBIR:
        pieza = jj_consume_token(PALABRA_RESERVADA_ESCRIBIR);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                         numero++; grabarDatosPieza(numero, "PALABRA RESERVADA ESCRIBIR", pieza);
        break;
      case PALABRA_RESERVADA_SI:
        pieza = jj_consume_token(PALABRA_RESERVADA_SI);
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                   numero++; grabarDatosPieza(numero, "PALABRA RESERVADA SI", pieza);
        break;
      case PALABRA_RESERVADA_SINO:
        pieza = jj_consume_token(PALABRA_RESERVADA_SINO);
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                     numero++; grabarDatosPieza(numero, "PALABRA RESERVADA SINO", pieza);
        break;
      case PALABRA_RESERVADA_FINSI:
        pieza = jj_consume_token(PALABRA_RESERVADA_FINSI);
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                      numero++; grabarDatosPieza(numero, "PALABRA RESERVADA FINSI", pieza);
        break;
      case PALABRA_RESERVADA_ENTONCES:
        pieza = jj_consume_token(PALABRA_RESERVADA_ENTONCES);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                         numero++; grabarDatosPieza(numero, "PALABRA RESERVADA ENTONCES", pieza);
        break;
      case PALABRA_RESERVADA_MIENTRAS:
        pieza = jj_consume_token(PALABRA_RESERVADA_MIENTRAS);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                         numero++; grabarDatosPieza(numero, "PALABRA RESERVADA MIENTRAS", pieza);
        break;
      case PALABRA_RESERVADA_RETORNAR:
        pieza = jj_consume_token(PALABRA_RESERVADA_RETORNAR);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                         numero++; grabarDatosPieza(numero, "PALABRA RESERVADA RETORNAR", pieza);
        break;
      case PALABRA_RESERVADA_NUMERO:
        pieza = jj_consume_token(PALABRA_RESERVADA_NUMERO);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                       numero++; grabarDatosPieza(numero, "PALABRA RESERVADA ENTERO", pieza);
        break;
      case PALABRA_RESERVADA_LOGICO:
        pieza = jj_consume_token(PALABRA_RESERVADA_LOGICO);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                       numero++; grabarDatosPieza(numero, "PALABRA RESERVADA LOGICO", pieza);
        break;
      case PALABRA_RESERVADA_CADENA:
        pieza = jj_consume_token(PALABRA_RESERVADA_CADENA);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                       numero++; grabarDatosPieza(numero, "PALABRA RESERVADA CADENA", pieza);
        break;
      case PALABRA_RESERVADA_IMPRIMIR:
        pieza = jj_consume_token(PALABRA_RESERVADA_IMPRIMIR);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                         numero++; grabarDatosPieza(numero, "PALABRA RESERVADA IMPRIMIR", pieza);
        break;
      case ASIGNACION:
        pieza = jj_consume_token(ASIGNACION);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         numero++; grabarDatosPieza(numero, "ASIGNACION", pieza);
        break;
      case ENTERO:
        pieza = jj_consume_token(ENTERO);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     numero++; grabarDatosPieza(numero, "ENTERO", pieza);
        break;
      case CONCATENAR:
        pieza = jj_consume_token(CONCATENAR);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         numero++; grabarDatosPieza(numero, "CONCATENAR", pieza);
        break;
      case SEPARADOR:
        pieza = jj_consume_token(SEPARADOR);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        numero++; grabarDatosPieza(numero, "SEPARADOR", pieza);
        break;
      case IDENTIFICADOR:
        pieza = jj_consume_token(IDENTIFICADOR);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            numero++; grabarDatosPieza(numero, "IDENTIFICADOR", pieza);
        break;
      case FIN_LINEA:
        pieza = jj_consume_token(FIN_LINEA);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        numero++; grabarDatosPieza(numero, "FIN LINEA", pieza);
        break;
      case ABRIR_CORCHETE:
        pieza = jj_consume_token(ABRIR_CORCHETE);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             numero++; grabarDatosPieza(numero, "ABRIR CORCHETE", pieza);
        break;
      case CERRAR_CORCHETE:
        pieza = jj_consume_token(CERRAR_CORCHETE);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              numero++; grabarDatosPieza(numero, "CERRAR CORCHETE", pieza);
        break;
      case ABRIR_LLAVE:
        pieza = jj_consume_token(ABRIR_LLAVE);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          numero++; grabarDatosPieza(numero, "ABRIR LLAVE", pieza);
        break;
      case CERRAR_LLAVE:
        pieza = jj_consume_token(CERRAR_LLAVE);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           numero++; grabarDatosPieza(numero, "CERRAR LLAVE", pieza);
        break;
      case SUMA:
        pieza = jj_consume_token(SUMA);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   numero++; grabarDatosPieza(numero, "SUMA" , pieza);
        break;
      case MULTIPLICACION:
        pieza = jj_consume_token(MULTIPLICACION);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             numero++; grabarDatosPieza(numero, "MULTIPLICACION", pieza);
        break;
      case MODULO:
        pieza = jj_consume_token(MODULO);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     numero++; grabarDatosPieza(numero, "MODULO", pieza);
        break;
      case SUSTRACCION:
        pieza = jj_consume_token(SUSTRACCION);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          numero++; grabarDatosPieza(numero, "SUSTRACCION", pieza);
        break;
      case DIVISION:
        pieza = jj_consume_token(DIVISION);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       numero++; grabarDatosPieza(numero, "DIVISION", pieza);
        break;
      case LOGICOS:
        pieza = jj_consume_token(LOGICOS);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      numero++; grabarDatosPieza(numero, "LOGICO", pieza);
        break;
      case RELACIONALES:
        pieza = jj_consume_token(RELACIONALES);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           numero++; grabarDatosPieza(numero, "RELACIONALES", pieza);
        break;
      case COMENTARIO:
        pieza = jj_consume_token(COMENTARIO);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         numero++; grabarDatosPieza(numero, "COMENTARIO", pieza);
        break;
      case CADENA:
        pieza = jj_consume_token(CADENA);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     numero++; grabarDatosPieza(numero, "CADENA", pieza);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(ENTERO)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(CONCATENAR)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(CADENA)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_8()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalizadorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x814180,0x814180,0x400000,0x40,0x2880000,0x200,0x880000,0x20000000,0xc0000000,0x2880000,0x20000000,0xc0000000,0x200000,0x14000,0x400000,0xffefffc0,0xffefffc0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x20,0x0,0x20,0x1,0x2,0x20,0x1,0x2,0x0,0x0,0x0,0x3f,0x3f,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Analizador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analizador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Analizador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Analizador(AnalizadorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
