/* Generated By:JJTree&JavaCC: Do not edit this line. Analizador.java */
package co.edu.uniquindio.compiladores.frontend.lexico;

import co.edu.uniquindio.compiladores.utils.Variable;
import java.util.ArrayList;

public class Analizador/*@bgen(jjtree)*/implements AnalizadorTreeConstants, AnalizadorConstants {/*@bgen(jjtree)*/
  protected static JJTAnalizadorState jjtree = new JJTAnalizadorState();
   static int numero = 0;

   private static ArrayList<Variable> variables;

   private static void grabarLexema (int n, String token,  String lexema, int nL, int nC) {
      //System.out.println(n + ") Token: \t"+  token + "\t\t\tLexema: \t\"" + lexema + "\" \tLinea: \t"+ nL + "\tColumna: \t" + nC);
      System.out.println(n + ") Linea:\u005ct"+nL+"\u005ctColumna:\u005ct"+nC+"\u005ctLexema:\u005ct\u005c""+lexema+"\u005c"\u005ct"+"Token:\u005ct"+token);
   }

   private static void grabarDatosPieza(int n, String token, Token pieza) {
      grabarLexema(n, token, pieza.image, pieza.beginLine, pieza.beginColumn );
      variables.add(new Variable(n, token, pieza));
   }

  public static void main(String args []) throws ParseException
  {
        try
        {
                System.out.println("Ingrese el c\u00f3digo a analizar:");
                Analizador analizador = new Analizador(System.in);
                SimpleNode sNode = analizador.mathuq();
                sNode.dump("");
        //analizador.TokenList();

           System.out.println("Se ha compilado con \u00e9xito");
       //System.out.println("Analisis terminado:");
       //System.out.println("No se han hallado errores léxicos");


    }catch(TokenMgrError te){
           System.out.println("Se han encontrado errores lexicos.");
           System.out.println(te.getMessage());
        }catch(ParseException e){
           System.out.println("Analizador: Se han encontrado errores en el analisis.");
           System.out.println(e.getMessage());
        }catch(Exception e){
           System.out.println("Analizador: Error General");
           System.out.println(e.getMessage());
        }
  }

public static void probarAnalizador(String nombreArchivo) throws ParseException {
        try{
                Analizador parser = new Analizador(new java.io.FileInputStream(nombreArchivo));
                parser.TokenList();
        } catch(java.io.FileNotFoundException e){
                  System.out.println(e.getMessage());
        }
  }


public void inicializarCompilador(String nombreArchivo) throws ParseException {
        try{
                Analizador parser = new Analizador(new java.io.FileInputStream(nombreArchivo));
                parser.TokenList();
                variables = new ArrayList<Variable> ();

        } catch(java.io.FileNotFoundException e){
                  System.out.println(e.getMessage());
        }
}


        public ArrayList<Variable> getVariables() {
                return variables;
        }

        public void setVariables(ArrayList<Variable> variables) {
                this.variables = variables;
        }

  static final public SimpleNode mathuq() throws ParseException {
 /*@bgen(jjtree) mathuq */
  SimpleNode jjtn000 = new SimpleNode(JJTMATHUQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      listadoSentencias();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void listadoSentencias() throws ParseException {
 /*@bgen(jjtree) listadoSentencias */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTADOSENTENCIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      instruccion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PALABRA_RESERVADA_ESCRIBIR:
      case PALABRA_RESERVADA_SI:
      case PALABRA_RESERVADA_ENTERO:
      case PALABRA_RESERVADA_CADENA:
      case IDENTIFICADOR:
        listadoSentencias();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void instruccion() throws ParseException {
 /*@bgen(jjtree) instruccion */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTRUCCION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PALABRA_RESERVADA_ENTERO:
      case PALABRA_RESERVADA_CADENA:
        definirVar();
        break;
      case PALABRA_RESERVADA_ESCRIBIR:
        imprimir();
        break;
      case IDENTIFICADOR:
        asignarVar();
        break;
      case PALABRA_RESERVADA_SI:
        condicion();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void definirVar() throws ParseException {
 /*@bgen(jjtree) definirVar */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFINIRVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      tipoDato();
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEPARADOR:
        jj_consume_token(SEPARADOR);
        listadoIdentificadores();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(FIN_LINEA);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void imprimir() throws ParseException {
 /*@bgen(jjtree) imprimir */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPRIMIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PALABRA_RESERVADA_ESCRIBIR);
      jj_consume_token(ABRIR_CORCHETE);
      imprimible();
      jj_consume_token(CERRAR_CORCHETE);
      jj_consume_token(FIN_LINEA);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void imprimible() throws ParseException {
 /*@bgen(jjtree) imprimible */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPRIMIBLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      contactenacion();
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void asignarVar() throws ParseException {
 /*@bgen(jjtree) asignarVar */
  SimpleNode jjtn000 = new SimpleNode(JJTASIGNARVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(ASIGNACION);
      tipoAsignacion();
      jj_consume_token(FIN_LINEA);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void tipoAsignacion() throws ParseException {
 /*@bgen(jjtree) tipoAsignacion */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOASIGNACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PALABRA_RESERVADA_LEER:
        leer();
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_1(2)) {
          contactenacion();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ENTERO:
          case IDENTIFICADOR:
          case ABRIR_CORCHETE:
          case CADENA:
            operacionMat();
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void condicion() throws ParseException {
 /*@bgen(jjtree) condicion */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PALABRA_RESERVADA_SI);
      grupoCondiciones();
      jj_consume_token(PALABRA_RESERVADA_ENTONCES);
      listadoSentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PALABRA_RESERVADA_SINO:
        jj_consume_token(PALABRA_RESERVADA_SINO);
        listadoSentencias();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(PALABRA_RESERVADA_FINSI);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void grupoCondiciones() throws ParseException {
 /*@bgen(jjtree) grupoCondiciones */
  SimpleNode jjtn000 = new SimpleNode(JJTGRUPOCONDICIONES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      condicionador();
      jj_consume_token(RELACIONALES);
      condicionador();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void condicionador() throws ParseException {
 /*@bgen(jjtree) condicionador */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      case ENTERO:
        jj_consume_token(ENTERO);
        break;
      case CADENA:
        jj_consume_token(CADENA);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void leer() throws ParseException {
 /*@bgen(jjtree) leer */
  SimpleNode jjtn000 = new SimpleNode(JJTLEER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PALABRA_RESERVADA_LEER);
      jj_consume_token(ABRIR_CORCHETE);
      jj_consume_token(CERRAR_CORCHETE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void operacionMat() throws ParseException {
 /*@bgen(jjtree) operacionMat */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERACIONMAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      termino();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
      case SUSTRACCION:
        operadorAdicion();
        operacionMat();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void termino() throws ParseException {
 /*@bgen(jjtree) termino */
  SimpleNode jjtn000 = new SimpleNode(JJTTERMINO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      factor();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACION:
      case MODULO:
      case DIVISION:
        operadorMult();
        termino();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void factor() throws ParseException {
 /*@bgen(jjtree) factor */
  SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENTERO:
      case IDENTIFICADOR:
      case CADENA:
        condicionador();
        break;
      case ABRIR_CORCHETE:
        jj_consume_token(ABRIR_CORCHETE);
        operacionMat();
        jj_consume_token(CERRAR_CORCHETE);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void operadorAdicion() throws ParseException {
 /*@bgen(jjtree) operadorAdicion */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORADICION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
        jj_consume_token(SUMA);
        break;
      case SUSTRACCION:
        jj_consume_token(SUSTRACCION);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void operadorMult() throws ParseException {
 /*@bgen(jjtree) operadorMult */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACION:
        jj_consume_token(MULTIPLICACION);
        break;
      case MODULO:
        jj_consume_token(MODULO);
        break;
      case DIVISION:
        jj_consume_token(DIVISION);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void contactenacion() throws ParseException {
 /*@bgen(jjtree) contactenacion */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTACTENACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      condicionador();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCATENAR:
        jj_consume_token(CONCATENAR);
        condicionador();
        contactenacion();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void tipoDato() throws ParseException {
 /*@bgen(jjtree) tipoDato */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODATO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PALABRA_RESERVADA_CADENA:
        jj_consume_token(PALABRA_RESERVADA_CADENA);
        break;
      case PALABRA_RESERVADA_ENTERO:
        jj_consume_token(PALABRA_RESERVADA_ENTERO);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void listadoIdentificadores() throws ParseException {
 /*@bgen(jjtree) listadoIdentificadores */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTADOIDENTIFICADORES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEPARADOR:
        jj_consume_token(SEPARADOR);
        listadoIdentificadores();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/**
 * Reconoce el contenido completo de un archivo
 *
 * TokenList -> (TokenElement)* 
 */
  static final public void TokenList() throws ParseException {
 /*@bgen(jjtree) TokenList */
  SimpleNode jjtn000 = new SimpleNode(JJTTOKENLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PALABRA_RESERVADA_LEER:
        case PALABRA_RESERVADA_ESCRIBIR:
        case PALABRA_RESERVADA_SI:
        case PALABRA_RESERVADA_SINO:
        case PALABRA_RESERVADA_FINSI:
        case PALABRA_RESERVADA_ENTONCES:
        case PALABRA_RESERVADA_MIENTRAS:
        case PALABRA_RESERVADA_RETORNAR:
        case PALABRA_RESERVADA_ENTERO:
        case PALABRA_RESERVADA_LOGICO:
        case PALABRA_RESERVADA_CADENA:
        case PALABRA_RESERVADA_IMPRIMIR:
        case ASIGNACION:
        case ENTERO:
        case CONCATENAR:
        case SEPARADOR:
        case IDENTIFICADOR:
        case FIN_LINEA:
        case ABRIR_CORCHETE:
        case CERRAR_CORCHETE:
        case ABRIR_LLAVE:
        case CERRAR_LLAVE:
        case SUMA:
        case MULTIPLICACION:
        case MODULO:
        case SUSTRACCION:
        case DIVISION:
        case LOGICOS:
        case RELACIONALES:
        case COMENTARIO:
        case CADENA:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_1;
        }
        TokenElement();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TokenElement() throws ParseException {
 /*@bgen(jjtree) TokenElement */
 SimpleNode jjtn000 = new SimpleNode(JJTTOKENELEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token pieza;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PALABRA_RESERVADA_LEER:
        pieza = jj_consume_token(PALABRA_RESERVADA_LEER);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                    numero++; grabarDatosPieza(numero, "PALABRA RESERVADA LEER", pieza);
        break;
      case PALABRA_RESERVADA_ESCRIBIR:
        pieza = jj_consume_token(PALABRA_RESERVADA_ESCRIBIR);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                         numero++; grabarDatosPieza(numero, "PALABRA RESERVADA ESCRIBIR", pieza);
        break;
      case PALABRA_RESERVADA_SI:
        pieza = jj_consume_token(PALABRA_RESERVADA_SI);
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                   numero++; grabarDatosPieza(numero, "PALABRA RESERVADA SI", pieza);
        break;
      case PALABRA_RESERVADA_SINO:
        pieza = jj_consume_token(PALABRA_RESERVADA_SINO);
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                     numero++; grabarDatosPieza(numero, "PALABRA RESERVADA SINO", pieza);
        break;
      case PALABRA_RESERVADA_FINSI:
        pieza = jj_consume_token(PALABRA_RESERVADA_FINSI);
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                      numero++; grabarDatosPieza(numero, "PALABRA RESERVADA FINSI", pieza);
        break;
      case PALABRA_RESERVADA_ENTONCES:
        pieza = jj_consume_token(PALABRA_RESERVADA_ENTONCES);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                         numero++; grabarDatosPieza(numero, "PALABRA RESERVADA ENTONCES", pieza);
        break;
      case PALABRA_RESERVADA_MIENTRAS:
        pieza = jj_consume_token(PALABRA_RESERVADA_MIENTRAS);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                         numero++; grabarDatosPieza(numero, "PALABRA RESERVADA MIENTRAS", pieza);
        break;
      case PALABRA_RESERVADA_RETORNAR:
        pieza = jj_consume_token(PALABRA_RESERVADA_RETORNAR);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                         numero++; grabarDatosPieza(numero, "PALABRA RESERVADA RETORNAR", pieza);
        break;
      case PALABRA_RESERVADA_ENTERO:
        pieza = jj_consume_token(PALABRA_RESERVADA_ENTERO);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                       numero++; grabarDatosPieza(numero, "PALABRA RESERVADA ENTERO", pieza);
        break;
      case PALABRA_RESERVADA_LOGICO:
        pieza = jj_consume_token(PALABRA_RESERVADA_LOGICO);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                       numero++; grabarDatosPieza(numero, "PALABRA RESERVADA LOGICO", pieza);
        break;
      case PALABRA_RESERVADA_CADENA:
        pieza = jj_consume_token(PALABRA_RESERVADA_CADENA);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                       numero++; grabarDatosPieza(numero, "PALABRA RESERVADA CADENA", pieza);
        break;
      case PALABRA_RESERVADA_IMPRIMIR:
        pieza = jj_consume_token(PALABRA_RESERVADA_IMPRIMIR);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                         numero++; grabarDatosPieza(numero, "PALABRA RESERVADA IMPRIMIR", pieza);
        break;
      case ASIGNACION:
        pieza = jj_consume_token(ASIGNACION);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         numero++; grabarDatosPieza(numero, "ASIGNACION", pieza);
        break;
      case ENTERO:
        pieza = jj_consume_token(ENTERO);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     numero++; grabarDatosPieza(numero, "ENTERO", pieza);
        break;
      case CONCATENAR:
        pieza = jj_consume_token(CONCATENAR);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         numero++; grabarDatosPieza(numero, "CONCATENAR", pieza);
        break;
      case SEPARADOR:
        pieza = jj_consume_token(SEPARADOR);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        numero++; grabarDatosPieza(numero, "SEPARADOR", pieza);
        break;
      case IDENTIFICADOR:
        pieza = jj_consume_token(IDENTIFICADOR);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            numero++; grabarDatosPieza(numero, "IDENTIFICADOR", pieza);
        break;
      case FIN_LINEA:
        pieza = jj_consume_token(FIN_LINEA);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        numero++; grabarDatosPieza(numero, "FIN LINEA", pieza);
        break;
      case ABRIR_CORCHETE:
        pieza = jj_consume_token(ABRIR_CORCHETE);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             numero++; grabarDatosPieza(numero, "ABRIR CORCHETE", pieza);
        break;
      case CERRAR_CORCHETE:
        pieza = jj_consume_token(CERRAR_CORCHETE);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              numero++; grabarDatosPieza(numero, "CERRAR CORCHETE", pieza);
        break;
      case ABRIR_LLAVE:
        pieza = jj_consume_token(ABRIR_LLAVE);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          numero++; grabarDatosPieza(numero, "ABRIR LLAVE", pieza);
        break;
      case CERRAR_LLAVE:
        pieza = jj_consume_token(CERRAR_LLAVE);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           numero++; grabarDatosPieza(numero, "CERRAR LLAVE", pieza);
        break;
      case SUMA:
        pieza = jj_consume_token(SUMA);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   numero++; grabarDatosPieza(numero, "SUMA" , pieza);
        break;
      case MULTIPLICACION:
        pieza = jj_consume_token(MULTIPLICACION);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             numero++; grabarDatosPieza(numero, "MULTIPLICACION", pieza);
        break;
      case MODULO:
        pieza = jj_consume_token(MODULO);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     numero++; grabarDatosPieza(numero, "MODULO", pieza);
        break;
      case SUSTRACCION:
        pieza = jj_consume_token(SUSTRACCION);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          numero++; grabarDatosPieza(numero, "SUSTRACCION", pieza);
        break;
      case DIVISION:
        pieza = jj_consume_token(DIVISION);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       numero++; grabarDatosPieza(numero, "DIVISION", pieza);
        break;
      case LOGICOS:
        pieza = jj_consume_token(LOGICOS);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      numero++; grabarDatosPieza(numero, "LOGICO", pieza);
        break;
      case RELACIONALES:
        pieza = jj_consume_token(RELACIONALES);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           numero++; grabarDatosPieza(numero, "RELACIONALES", pieza);
        break;
      case COMENTARIO:
        pieza = jj_consume_token(COMENTARIO);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         numero++; grabarDatosPieza(numero, "COMENTARIO", pieza);
        break;
      case CADENA:
        pieza = jj_consume_token(CADENA);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     numero++; grabarDatosPieza(numero, "CADENA", pieza);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(CONCATENAR)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_2() {
    if (jj_3R_3()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalizadorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x814180,0x814180,0x400000,0x40,0x2880000,0x200,0x880000,0x20000000,0xc0000000,0x2880000,0x20000000,0xc0000000,0x200000,0x14000,0x400000,0xffefffc0,0xffefffc0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x20,0x0,0x20,0x1,0x2,0x20,0x1,0x2,0x0,0x0,0x0,0x3f,0x3f,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Analizador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analizador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Analizador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Analizador(AnalizadorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
