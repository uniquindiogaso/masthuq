/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Analizador)
package co.edu.uniquindio.compiladores.frontend.lexico;

public class Analizador
{

   static int numero = 0;

   private static void grabarLexema (int n, String token,  String lexema, int nL, int nC) {
      //System.out.println(n + ") Token: \t"+  token + "\t\t\tLexema: \t\"" + lexema + "\" \tLinea: \t"+ nL + "\tColumna: \t" + nC);
      System.out.println(n + ") Linea:\t"+nL+"\tColumna:\t"+nC+"\tLexema:\t\""+lexema+"\"\t"+"Token:\t"+token);
   }  

   private static void grabarDatosPieza(int n, String token, Token pieza) {
      grabarLexema(n, token, pieza.image, pieza.beginLine, pieza.beginColumn );      
   }

    
  public static void main(String args []) throws ParseException
  {
	try
	{
	   System.out.println("Ingrese el código a analizar:");
	   Analizador parser = new Analizador(System.in);
       parser.TokenList();

       System.out.println("Analisis terminado:");
       System.out.println("No se han hallado errores léxicos");
       
       
    }catch(TokenMgrError te)
	{
	   System.out.println("Se han encontrado errores lexicos.");	   
	   System.out.println(te.getMessage());
	   
	} 
    catch(ParseException e)
	{
	   System.out.println("Analizador: Se han encontrado errores en el analisis.");
	   System.out.println(e.getMessage());	   
	}    
  }

public static void probarAnalizador(String nombreArchivo) throws ParseException {
	try{
  		Analizador parser = new Analizador(new java.io.FileInputStream(nombreArchivo));
  		parser.TokenList();
	} catch(java.io.FileNotFoundException e){
		  System.out.println(e.getMessage());
	}
	  


  }
  
}

PARSER_END(Analizador)

/* Espacio en blanco, saltos de linea, tabulares */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN : /*PALABRA RESERVADA LEER*/
{
  < PALABRA_RESERVADA_LEER: "Leer" >
}
TOKEN : /*PALABRA RESERVADA ESCRIBIR*/
{
  < PALABRA_RESERVADA_ESCRIBIR: "Escribir" >
}
TOKEN : /*PALABRA RESERVADA SI*/
{
  < PALABRA_RESERVADA_SI: "Si" >
}
TOKEN : /*PALABRA RESERVADA SINO*/
{
  < PALABRA_RESERVADA_SINO: "Sino" >
}
TOKEN : /*PALABRA RESERVADA FINSI*/
{
  < PALABRA_RESERVADA_FINSI: "Finsi" >
}
TOKEN : /*PALABRA RESERVADA ENTONCES*/
{
  < PALABRA_RESERVADA_ENTONCES: "Entonces" >
}
TOKEN : /*PALABRA RESERVADA MIENTRAS*/
{
  < PALABRA_RESERVADA_MIENTRAS: "Mientras" >
}
TOKEN : /*PALABRA RESERVADA RETORNAR*/
{
  < PALABRA_RESERVADA_RETORNAR: "Retornar" >
}
TOKEN : /*PALABRA RESERVADA ENTERO*/
{
  < PALABRA_RESERVADA_ENTERO: "Entero" >
}
TOKEN : /*PALABRA RESERVADA LOGICO*/
{
  < PALABRA_RESERVADA_LOGICO: "Logico" >
}
TOKEN : /*PALABRA RESERVADA CADENA*/
{
  < PALABRA_RESERVADA_CADENA: "Cadena" >
}
TOKEN : /*PALABRA RESERVADA IMPRIMIR*/
{
  < PALABRA_RESERVADA_IMPRIMIR: "Imprimir" >
}
TOKEN : /* ASIGNACION*/
{
  < ASIGNACION : "=" >
}
TOKEN : /*NUMEROS EJEMPLO 1, 1234, 987*/
{
  < ENTERO : (< DIGIT >)+ | "-"(< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}
TOKEN : /*CONCATENAR*/
{
  < CONCATENAR : "@" >
}
TOKEN : /* SEPARADOR*/
{
  < SEPARADOR : "," >
}
TOKEN : /*IDENTIFICADORES EJEMPLO a, casa, clase1*/
{
  < IDENTIFICADOR :["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9","_"] )* >
} 

TOKEN : /* FIN DE LINEA*/
{
  < FIN_LINEA : "." >
}

TOKEN : /* ABRIR CORCHETE*/
{
  < ABRIR_CORCHETE : "[" >
}

TOKEN : /* CERRAR CORCHETE*/
{
  < CERRAR_CORCHETE : "]" >
}
TOKEN : /* ABRIR LLAVE*/
{
  < ABRIR_LLAVE : "{" >
}
TOKEN : /* CERRAR LLAVE*/
{
  < CERRAR_LLAVE : "}" >
}
TOKEN : /* OPERATORS SUSTRACCION*/
{
  < SUMA : "+" >
| < MULTIPLICACION : "*" >
| < MODULO : "%" >
| < SUSTRACCION : "-" >
| < DIVISION : "/" >
}
TOKEN : /*LOGICOS*/
{
  < LOGICOS :"&"|"|" >
}
TOKEN : /*RELACIONALES*/
{
  < RELACIONALES :"<"|">"|" >="|"<="|"<>"|"=="|"!=" >
}
TOKEN : /*COMENTARIO*/
{
  < COMENTARIO :"##"(~["#"])*"##" >
}
TOKEN : /*CADENA*/
{
  < CADENA :"\""(~["\""])*"\"" >
}

void mathuq():
{}
{
	listadoSentencias() 
	
}

void listadoSentencias():
{}
{
  instruccion() [listadoSentencias()]
}

void instruccion():
{}
{
  definirVar() | imprimir() | asignarVar() | condicion()
}

void definirVar():
{}
{
  tipoDato()<IDENTIFICADOR>[<SEPARADOR> listadoIdentificadores()]<FIN_LINEA>
}

void imprimir():
{}
{
  "Escribir" <ABRIR_CORCHETE> imprimible() <CERRAR_CORCHETE> <FIN_LINEA>
}

void imprimible():
{}
{
 condicionador()|contactenacion() 	
}

void asignarVar():
{}
{
  <IDENTIFICADOR> "=" tipoAsignacion() <FIN_LINEA>
}

void tipoAsignacion():
{}
{
  leer() | contactenacion() | operacionMat()
}

void condicion():
{}
{
  "Si" grupoCondiciones() "Entonces" listadoSentencias() ["Sino" listadoSentencias()] "Finsi"
}

void grupoCondiciones():
{}
{
  condicionador() <RELACIONALES> condicionador()
}

void condicionador():
{}
{
  <IDENTIFICADOR>|<ENTERO>
}

void leer():
{}
{
  <PALABRA_RESERVADA_LEER><ABRIR_CORCHETE> <CERRAR_CORCHETE> 
}

void operacionMat():
{}
{
 termino()[operadorAdicion()operacionMat()]
}

void termino():
{}
{
  factor()[operadorMult() termino()]
}

void factor():
{}
{
  condicionador() | < ABRIR_CORCHETE > operacionMat() < CERRAR_CORCHETE > 
}

void operadorAdicion():
{}
{
 <SUMA>|<SUSTRACCION> 
}

void operadorMult():
{}
{
  < MULTIPLICACION>|<MODULO>|<DIVISION>
}

void contactenacion():
{}
{
  <CADENA> 
}

void tipoDato():
{}
{
  < PALABRA_RESERVADA_CADENA > | < PALABRA_RESERVADA_ENTERO > 
}

void listadoIdentificadores():
{}
{
  < IDENTIFICADOR >[ < SEPARADOR > listadoIdentificadores() ]
}
  


  
  
  


/**
 * Reconoce el contenido completo de un archivo
 *
 * TokenList -> (TokenElement)* 
 */
void TokenList():
{}
{ 
  ( TokenElement() )*  
}

void TokenElement():
{Token pieza; }
{  
 pieza = <PALABRA_RESERVADA_LEER> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA LEER", pieza); }
| pieza = <PALABRA_RESERVADA_ESCRIBIR> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA ESCRIBIR", pieza); }
| pieza = <PALABRA_RESERVADA_SI> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA SI", pieza); }
| pieza = <PALABRA_RESERVADA_SINO> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA SINO", pieza); }
| pieza = <PALABRA_RESERVADA_FINSI> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA FINSI", pieza); }
| pieza = <PALABRA_RESERVADA_ENTONCES> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA ENTONCES", pieza); }  
| pieza = <PALABRA_RESERVADA_MIENTRAS> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA MIENTRAS", pieza); }
| pieza = <PALABRA_RESERVADA_RETORNAR> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA RETORNAR", pieza); }
| pieza = <PALABRA_RESERVADA_ENTERO> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA ENTERO", pieza); }
| pieza = <PALABRA_RESERVADA_LOGICO> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA LOGICO", pieza); }
| pieza = <PALABRA_RESERVADA_CADENA> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA CADENA", pieza); }
| pieza = <PALABRA_RESERVADA_IMPRIMIR> { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA IMPRIMIR", pieza); }
| pieza = <ASIGNACION> { numero++; grabarDatosPieza(numero, "ASIGNACION", pieza); }
| pieza = <ENTERO> { numero++; grabarDatosPieza(numero, "ENTERO", pieza); }
| pieza = <CONCATENAR> { numero++; grabarDatosPieza(numero, "CONCATENAR", pieza); }
| pieza = <SEPARADOR> { numero++; grabarDatosPieza(numero, "SEPARADOR", pieza); }
| pieza = <IDENTIFICADOR> { numero++; grabarDatosPieza(numero, "IDENTIFICADOR", pieza); }
| pieza = <FIN_LINEA> { numero++; grabarDatosPieza(numero, "FIN LINEA", pieza); }
| pieza = <ABRIR_CORCHETE> { numero++; grabarDatosPieza(numero, "ABRIR CORCHETE", pieza); }
| pieza = <CERRAR_CORCHETE> { numero++; grabarDatosPieza(numero, "CERRAR CORCHETE", pieza); }
| pieza = <ABRIR_LLAVE> { numero++; grabarDatosPieza(numero, "ABRIR LLAVE", pieza); }
| pieza = <CERRAR_LLAVE> { numero++; grabarDatosPieza(numero, "CERRAR LLAVE", pieza); }
| pieza = <SUMA> { numero++; grabarDatosPieza(numero, "SUMA" , pieza); }
| pieza = <MULTIPLICACION> { numero++; grabarDatosPieza(numero, "MULTIPLICACION", pieza); }
| pieza = <MODULO> { numero++; grabarDatosPieza(numero, "MODULO", pieza); }
| pieza = <SUSTRACCION> { numero++; grabarDatosPieza(numero, "SUSTRACCION", pieza); }
| pieza = <DIVISION> { numero++; grabarDatosPieza(numero, "DIVISION", pieza); }
| pieza = <LOGICOS> { numero++; grabarDatosPieza(numero, "LOGICO", pieza); }
| pieza = <RELACIONALES> { numero++; grabarDatosPieza(numero, "RELACIONALES", pieza); }
| pieza = <COMENTARIO> { numero++; grabarDatosPieza(numero, "COMENTARIO", pieza); }
| pieza = <CADENA> { numero++; grabarDatosPieza(numero, "CADENA", pieza); }
}
