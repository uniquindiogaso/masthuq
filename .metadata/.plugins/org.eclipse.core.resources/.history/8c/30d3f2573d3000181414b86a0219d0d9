/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Analizador.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
  LOOKAHEAD= 1;
}

PARSER_BEGIN(Analizador)
package co.edu.uniquindio.compiladores.frontend.lexico;

import co.edu.uniquindio.compiladores.utils.Variable;
import java.util.ArrayList;

public class Analizador/*@bgen(jjtree)*/implements AnalizadorTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTAnalizadorState jjtree = new JJTAnalizadorState();

/*@egen*/
		
   static int numero = 0;

   private static ArrayList<Variable> variables;

   private static void grabarLexema (int n, String token,  String lexema, int nL, int nC) {
      //System.out.println(n + ") Token: \t"+  token + "\t\t\tLexema: \t\"" + lexema + "\" \tLinea: \t"+ nL + "\tColumna: \t" + nC);
      System.out.println(n + ") Linea:\t"+nL+"\tColumna:\t"+nC+"\tLexema:\t\""+lexema+"\"\t"+"Token:\t"+token);
   }  

   private static void grabarDatosPieza(int n, String token, Token pieza) {
      grabarLexema(n, token, pieza.image, pieza.beginLine, pieza.beginColumn );
      variables.add(new Variable(n, token, pieza));      
   }
    
  public static void main(String args []) throws ParseException
  {
	try
	{
	   	System.out.println("Ingrese el c\u00f3digo a analizar:");
	   	Analizador analizador = new Analizador(System.in);
	   	SimpleNode sNode = analizador.mathuq();
	 	sNode.dump("");
       	//analizador.TokenList();

	   System.out.println("Se ha compilado con \u00e9xito");
       //System.out.println("Analisis terminado:");
       //System.out.println("No se han hallado errores l\u00e9xicos");
       
       
    }catch(TokenMgrError te){
	   System.out.println("Se han encontrado errores lexicos.");	   
	   System.out.println(te.getMessage());	   
	}catch(ParseException e){ 
	   System.out.println("Analizador: Se han encontrado errores en el analisis.");
	   System.out.println(e.getMessage());	   
	}catch(Exception e){ 
	   System.out.println("Analizador: Error General");
	   System.out.println(e.getMessage());	   
	}    
  }

public static void probarAnalizador(String nombreArchivo) throws ParseException {
	try{
  		Analizador parser = new Analizador(new java.io.FileInputStream(nombreArchivo));
  		parser.TokenList();
	} catch(java.io.FileNotFoundException e){
		  System.out.println(e.getMessage());
	}
  }


public void inicializarCompilador(String nombreArchivo) throws ParseException {
  	try{
  		Analizador parser = new Analizador(new java.io.FileInputStream(nombreArchivo));
  		parser.TokenList();
  		variables = new ArrayList<Variable> ();
  		
	} catch(java.io.FileNotFoundException e){
		  System.out.println(e.getMessage());
	}  
}


	public ArrayList<Variable> getVariables() {
		return variables;
	}

	public void setVariables(ArrayList<Variable> variables) {
		this.variables = variables;
	}

}

PARSER_END(Analizador)

/* Espacio en blanco, saltos de linea, tabulares */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN : /*PALABRA RESERVADA LEER*/
{
  < PALABRA_RESERVADA_LEER: "Leer" >
}
TOKEN : /*PALABRA RESERVADA ESCRIBIR*/
{
  < PALABRA_RESERVADA_ESCRIBIR: "Escribir" >
}
TOKEN : /*PALABRA RESERVADA SI*/
{
  < PALABRA_RESERVADA_SI: "Si" >
}
TOKEN : /*PALABRA RESERVADA SINO*/
{
  < PALABRA_RESERVADA_SINO: "Sino" >
}
TOKEN : /*PALABRA RESERVADA FINSI*/
{
  < PALABRA_RESERVADA_FINSI: "Finsi" >
}
TOKEN : /*PALABRA RESERVADA ENTONCES*/
{
  < PALABRA_RESERVADA_ENTONCES: "Entonces" >
}
TOKEN : /*PALABRA RESERVADA MIENTRAS*/
{
  < PALABRA_RESERVADA_MIENTRAS: "Mientras" >
}
TOKEN : /*PALABRA RESERVADA RETORNAR*/
{
  < PALABRA_RESERVADA_RETORNAR: "Retornar" >
}
TOKEN : /*PALABRA RESERVADA ENTERO*/
{
  < PALABRA_RESERVADA_ENTERO: "Entero" >
}
TOKEN : /*PALABRA RESERVADA LOGICO*/
{
  < PALABRA_RESERVADA_LOGICO: "Logico" >
}
TOKEN : /*PALABRA RESERVADA CADENA*/
{
  < PALABRA_RESERVADA_CADENA: "Cadena" >
}
TOKEN : /*PALABRA RESERVADA IMPRIMIR*/
{
  < PALABRA_RESERVADA_IMPRIMIR: "Imprimir" >
}
TOKEN : /* ASIGNACION*/
{
  < ASIGNACION : "=" >
}
TOKEN : /*NUMEROS EJEMPLO 1, 1234, 987*/
{
  < ENTERO : (< DIGIT >)+ | "-"(< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}
TOKEN : /*CONCATENAR*/
{
  < CONCATENAR : "@" >
}
TOKEN : /* SEPARADOR*/
{
  < SEPARADOR : "," >
}
TOKEN : /*IDENTIFICADORES EJEMPLO a, casa, clase1*/
{
  < IDENTIFICADOR :["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9","_"] )* >
} 

TOKEN : /* FIN DE LINEA*/
{
  < FIN_LINEA : "." >
}

TOKEN : /* ABRIR CORCHETE*/
{
  < ABRIR_CORCHETE : "[" >
}

TOKEN : /* CERRAR CORCHETE*/
{
  < CERRAR_CORCHETE : "]" >
}
TOKEN : /* ABRIR LLAVE*/
{
  < ABRIR_LLAVE : "{" >
}
TOKEN : /* CERRAR LLAVE*/
{
  < CERRAR_LLAVE : "}" >
}
TOKEN : /* OPERATORS SUSTRACCION*/
{
  < SUMA : "+" >
| < MULTIPLICACION : "*" >
| < MODULO : "%" >
| < SUSTRACCION : "-" >
| < DIVISION : "/" >
}
TOKEN : /*LOGICOS*/
{
  < LOGICOS :"&"|"|" >
}
TOKEN : /*RELACIONALES*/
{
  < RELACIONALES :"<"|">"|" >="|"<="|"<>"|"=="|"!=" >
}
TOKEN : /*COMENTARIO*/
{
  < COMENTARIO :"##"(~["#"])*"##" >
}
TOKEN : /*CADENA*/
{
  < CADENA :"\""(~["\""])*"\"" >
}

SimpleNode mathuq():
{/*@bgen(jjtree) mathuq */
  SimpleNode jjtn000 = new SimpleNode(JJTMATHUQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) mathuq */
        try {
/*@egen*/
	listadoSentencias()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  	
}

void listadoSentencias():
{/*@bgen(jjtree) listadoSentencias */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTADOSENTENCIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) listadoSentencias */
  try {
/*@egen*/
  instruccion() [listadoSentencias()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void instruccion():
{/*@bgen(jjtree) instruccion */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTRUCCION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) instruccion */
  try {
/*@egen*/
  definirVar() | imprimir() | asignarVar() | condicion()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void definirVar():
{/*@bgen(jjtree) definirVar */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFINIRVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) definirVar */
  try {
/*@egen*/
  tipoDato()<IDENTIFICADOR>[<SEPARADOR> listadoIdentificadores()]<FIN_LINEA>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void imprimir():
{/*@bgen(jjtree) imprimir */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPRIMIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) imprimir */
  try {
/*@egen*/
  < PALABRA_RESERVADA_ESCRIBIR > <ABRIR_CORCHETE> imprimible() <CERRAR_CORCHETE> <FIN_LINEA>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void imprimible():
{/*@bgen(jjtree) imprimible */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPRIMIBLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) imprimible */
 try {
/*@egen*/
 contactenacion()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 	
}

void asignarVar():
{/*@bgen(jjtree) asignarVar */
  SimpleNode jjtn000 = new SimpleNode(JJTASIGNARVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) asignarVar */
  try {
/*@egen*/
  <IDENTIFICADOR> < ASIGNACION >  tipoAsignacion() <FIN_LINEA>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void tipoAsignacion():
{/*@bgen(jjtree) tipoAsignacion */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOASIGNACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipoAsignacion */
  try {
/*@egen*/ 
  leer() | LOOKAHEAD(2) contactenacion() | operacionMat()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void condicion():
{/*@bgen(jjtree) condicion */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) condicion */
  try {
/*@egen*/
  < PALABRA_RESERVADA_SI >  grupoCondiciones() < PALABRA_RESERVADA_ENTONCES >  listadoSentencias() [< PALABRA_RESERVADA_SINO >  listadoSentencias()] < PALABRA_RESERVADA_FINSI >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void grupoCondiciones():
{/*@bgen(jjtree) grupoCondiciones */
  SimpleNode jjtn000 = new SimpleNode(JJTGRUPOCONDICIONES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) grupoCondiciones */
  try {
/*@egen*/
  condicionador() <RELACIONALES> condicionador()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void condicionador():
{/*@bgen(jjtree) condicionador */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) condicionador */
  try {
/*@egen*/   
  <IDENTIFICADOR>|<ENTERO>|<CADENA>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void leer():
{/*@bgen(jjtree) leer */
  SimpleNode jjtn000 = new SimpleNode(JJTLEER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) leer */
  try {
/*@egen*/
  <PALABRA_RESERVADA_LEER><ABRIR_CORCHETE> <CERRAR_CORCHETE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void operacionMat():
{/*@bgen(jjtree) operacionMat */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERACIONMAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) operacionMat */
 try {
/*@egen*/
 termino()[operadorAdicion()operacionMat()]/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void termino():
{/*@bgen(jjtree) termino */
  SimpleNode jjtn000 = new SimpleNode(JJTTERMINO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) termino */
  try {
/*@egen*/
  factor()[operadorMult() termino()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void factor():
{/*@bgen(jjtree) factor */
  SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) factor */
  try {
/*@egen*/
  condicionador() | < ABRIR_CORCHETE > operacionMat() < CERRAR_CORCHETE >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void operadorAdicion():
{/*@bgen(jjtree) operadorAdicion */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORADICION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) operadorAdicion */
 try {
/*@egen*/
 <SUMA>|<SUSTRACCION>/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

void operadorMult():
{/*@bgen(jjtree) operadorMult */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) operadorMult */
  try {
/*@egen*/
  < MULTIPLICACION>|<MODULO>|<DIVISION>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void contactenacion():
{/*@bgen(jjtree) contactenacion */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTACTENACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) contactenacion */
  try {
/*@egen*/
  condicionador() [< CONCATENAR > condicionador()  contactenacion()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

void tipoDato():
{/*@bgen(jjtree) tipoDato */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODATO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipoDato */
  try {
/*@egen*/
  < PALABRA_RESERVADA_CADENA > | < PALABRA_RESERVADA_ENTERO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void listadoIdentificadores():
{/*@bgen(jjtree) listadoIdentificadores */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTADOIDENTIFICADORES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) listadoIdentificadores */
  try {
/*@egen*/
  < IDENTIFICADOR >[ < SEPARADOR > listadoIdentificadores() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
  

/**
 * Reconoce el contenido completo de un archivo
 *
 * TokenList -> (TokenElement)* 
 */
void TokenList():
{/*@bgen(jjtree) TokenList */
  SimpleNode jjtn000 = new SimpleNode(JJTTOKENLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TokenList */
  try {
/*@egen*/ 
  ( TokenElement() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

void TokenElement():
{/*@bgen(jjtree) TokenElement */
 SimpleNode jjtn000 = new SimpleNode(JJTTOKENELEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token pieza; }
{/*@bgen(jjtree) TokenElement */
 try {
/*@egen*/  
 pieza = <PALABRA_RESERVADA_LEER>/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA LEER", pieza); }
| pieza = <PALABRA_RESERVADA_ESCRIBIR>/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA ESCRIBIR", pieza); }
| pieza = <PALABRA_RESERVADA_SI>/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/ { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA SI", pieza); }
| pieza = <PALABRA_RESERVADA_SINO>/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA SINO", pieza); }
| pieza = <PALABRA_RESERVADA_FINSI>/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA FINSI", pieza); }
| pieza = <PALABRA_RESERVADA_ENTONCES>/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA ENTONCES", pieza); }  
| pieza = <PALABRA_RESERVADA_MIENTRAS>/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA MIENTRAS", pieza); }
| pieza = <PALABRA_RESERVADA_RETORNAR>/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA RETORNAR", pieza); }
| pieza = <PALABRA_RESERVADA_ENTERO>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA ENTERO", pieza); }
| pieza = <PALABRA_RESERVADA_LOGICO>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA LOGICO", pieza); }
| pieza = <PALABRA_RESERVADA_CADENA>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA CADENA", pieza); }
| pieza = <PALABRA_RESERVADA_IMPRIMIR>/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ { numero++; grabarDatosPieza(numero, "PALABRA RESERVADA IMPRIMIR", pieza); }
| pieza = <ASIGNACION>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ { numero++; grabarDatosPieza(numero, "ASIGNACION", pieza); }
| pieza = <ENTERO>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { numero++; grabarDatosPieza(numero, "ENTERO", pieza); }
| pieza = <CONCATENAR>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ { numero++; grabarDatosPieza(numero, "CONCATENAR", pieza); }
| pieza = <SEPARADOR>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { numero++; grabarDatosPieza(numero, "SEPARADOR", pieza); }
| pieza = <IDENTIFICADOR>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ { numero++; grabarDatosPieza(numero, "IDENTIFICADOR", pieza); }
| pieza = <FIN_LINEA>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { numero++; grabarDatosPieza(numero, "FIN LINEA", pieza); }
| pieza = <ABRIR_CORCHETE>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ { numero++; grabarDatosPieza(numero, "ABRIR CORCHETE", pieza); }
| pieza = <CERRAR_CORCHETE>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ { numero++; grabarDatosPieza(numero, "CERRAR CORCHETE", pieza); }
| pieza = <ABRIR_LLAVE>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { numero++; grabarDatosPieza(numero, "ABRIR LLAVE", pieza); }
| pieza = <CERRAR_LLAVE>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { numero++; grabarDatosPieza(numero, "CERRAR LLAVE", pieza); }
| pieza = <SUMA>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { numero++; grabarDatosPieza(numero, "SUMA" , pieza); }
| pieza = <MULTIPLICACION>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ { numero++; grabarDatosPieza(numero, "MULTIPLICACION", pieza); }
| pieza = <MODULO>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { numero++; grabarDatosPieza(numero, "MODULO", pieza); }
| pieza = <SUSTRACCION>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { numero++; grabarDatosPieza(numero, "SUSTRACCION", pieza); }
| pieza = <DIVISION>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { numero++; grabarDatosPieza(numero, "DIVISION", pieza); }
| pieza = <LOGICOS>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { numero++; grabarDatosPieza(numero, "LOGICO", pieza); }
| pieza = <RELACIONALES>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { numero++; grabarDatosPieza(numero, "RELACIONALES", pieza); }
| pieza = <COMENTARIO>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ { numero++; grabarDatosPieza(numero, "COMENTARIO", pieza); }
| pieza = <CADENA>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { numero++; grabarDatosPieza(numero, "CADENA", pieza); }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
